package br.org.ciee.kairos.vagas.business.repository.specification;


import java.time.ZoneId;
import java.util.Objects;
import java.util.Optional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.jpa.domain.Specification;

import br.org.ciee.kairos.vagas.business.model.dtos.acomplocal.AcompanhamentoLocalFilter;
import br.org.ciee.kairos.vagas.business.model.entity.RepLocalContrato;
import br.org.ciee.kairos.vagas.business.model.entity.acomplocal.AcompanhamentoLocal;

public class AcompanhamentoLocalSpecification implements Specification<AcompanhamentoLocal> {

    private final AcompanhamentoLocalFilter filter;
    
    private Join<AcompanhamentoLocal, RepLocalContrato> joinLocalContrato;

    public AcompanhamentoLocalSpecification(AcompanhamentoLocalFilter filter) {
        this.filter = filter;
    }

    @Override
    public Predicate toPredicate(Root<AcompanhamentoLocal> root, CriteriaQuery<?> query, CriteriaBuilder cb) {

        Predicate predicate = cb.conjunction();

        add(predicate, cb.equal(getJoinLocalContrato(root).get("id"), filter.getIdLocalContrato()));

        Optional.ofNullable(filter.getContato())
                .ifPresent(contato -> add(predicate, cb.like(root.get("contato"), "%".concat(contato).concat("%"))));
        
        Optional.ofNullable(filter.getTipoProcesso())
        	.ifPresent(tipoProcesso -> add(predicate, cb.equal(root.get("tipoProcesso"), tipoProcesso)));
        
        Optional.ofNullable(filter.getStatusAcompanhamento())
        	.ifPresent(status -> add(predicate, cb.equal(root.get("statusAcompanhamento"), status)));

        Optional.ofNullable(filter.getDescricao())
                .ifPresent(descricao -> add(predicate, cb.like(root.get("descricao"), "%".concat(descricao).concat("%"))));

		Optional.ofNullable(filter.getDataDeCriacao())
				.ifPresent(dataDeCriacao -> add(predicate,
						cb.between(root.get("creationDate"), dataDeCriacao.atStartOfDay(ZoneId.systemDefault()),
								dataDeCriacao.atTime(23, 59).atZone(ZoneId.systemDefault()))));

        query.orderBy(cb.desc(root.get("creationDate")));

        return predicate;
    }

    private void add(Predicate predicate, Expression expression) {
        predicate.getExpressions().add(expression);
    }
    
    private Join<AcompanhamentoLocal, RepLocalContrato> getJoinLocalContrato(Root<AcompanhamentoLocal> root) {
		if (Objects.isNull(this.joinLocalContrato)) {
			this.joinLocalContrato = root.join("localContrato");
		}

		return this.joinLocalContrato;
	}
}