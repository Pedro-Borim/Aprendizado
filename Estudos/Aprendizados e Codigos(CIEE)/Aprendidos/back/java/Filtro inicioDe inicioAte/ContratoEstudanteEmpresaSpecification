package br.org.ciee.kairos.vagas.business.repository.specification;

import br.org.ciee.kairos.vagas.business.model.entity.Estudante;
import br.org.ciee.kairos.vagas.business.model.entity.RepLocalContrato;
import br.org.ciee.kairos.vagas.business.model.entity.VinculoVaga;
import br.org.ciee.kairos.vagas.business.model.entity.contratacao.precontrato.DadosVaga;
import br.org.ciee.kairos.vagas.business.model.entity.contrato.ContratoEstudanteEmpresa;
import br.org.ciee.kairos.vagas.business.model.entity.vagas.VagaEstagio;
import br.org.ciee.kairos.vagas.business.utils.SqlUtils;
import br.org.ciee.kairos.vagas.common.enums.contrato.SituacaoContratoEstudanteEmpresa;
import br.org.ciee.kairos.vagas.common.model.contratoestudanteempresa.ContratoEstudanteEmpresaFilter;
import br.org.ciee.kairos.vagas.common.model.parametros.TipoContrato;

import com.google.common.base.Strings;

import javax.persistence.criteria.*;
import java.util.Objects;
import java.util.Optional;


public class ContratoEstudanteEmpresaSpecification extends BasePCDFilterSpecification<ContratoEstudanteEmpresa> {

    private static final long serialVersionUID = -5336515798881055227L;
    private static final String ESTUDANTE = "estudante";
    private static final String PCD = "pcd";
    private static final String DADOS_ESTUDANTE = "dadosEstudante";
    private static final String CPF_ESTUDANTE = "cpf";
    private static final String CODIGO_ESTUDANTE = "codigoEstudante";
    private static final String NOME_ESTUDANTE = "nome";
    private static final String NOME_SOCIAL_ESTUDANTE = "nomeSocial";
    private static final String DADOS_VAGA = "dadosVaga";
    private static final String DATA_INICIO = "dataInicio";
    private static final String DATA_FINAL = "dataFinal";
    private static final String NUMERO_AUTORIZACAO = "numeroAutorizacao";
    protected static final String CODIGO_VAGA = "codigoVaga";

    private ContratoEstudanteEmpresaFilter filter;
    private Join<ContratoEstudanteEmpresa, Estudante> joinEstudante;
    protected Join<ContratoEstudanteEmpresa, VagaEstagio> joinVagaEstagio;

    public ContratoEstudanteEmpresaSpecification(ContratoEstudanteEmpresaFilter filter, Boolean pcd) {
        super(pcd);
        this.filter = filter;
    }

    @Override
    public Predicate toPredicate(Root<ContratoEstudanteEmpresa> root, CriteriaQuery<?> query, CriteriaBuilder criteriaBuilder) {
        Predicate predicate = criteriaBuilder.conjunction();

        filtroLocalContrato(root, criteriaBuilder, predicate);
        filtroContratoEstudanteEmpresa(root, criteriaBuilder, predicate);
        filtroEmpresa(root, criteriaBuilder, predicate);
        filtroEstudante(root, criteriaBuilder, predicate, query);
        filtroDataInicio(root, criteriaBuilder, predicate);
        filtroDataTermino(root, criteriaBuilder, predicate);
        filtroSituacaoDoContrato(root, criteriaBuilder, predicate);
        filtrarPCD(root.get(DADOS_ESTUDANTE).get(PCD), predicate, criteriaBuilder);       
        
        filtroNumeroAutorizacao(root, criteriaBuilder, predicate, query); 

        query.orderBy(criteriaBuilder.asc(root.get("dadosEmpresa").get("nome")), criteriaBuilder.asc(root.get("id")));

        return predicate;
    }

    private void filtroNumeroAutorizacao(Root<ContratoEstudanteEmpresa> root, CriteriaBuilder criteriaBuilder, Predicate predicate, CriteriaQuery<?> query) {
        boolean filtroNumeroAutorizacaoVazio = Objects.isNull(this.filter.getNumeroAutorizacao());
        
        if(!filtroNumeroAutorizacaoVazio) {
        	predicate.getExpressions().add(criteriaBuilder.in(root.join(DADOS_VAGA).get(CODIGO_VAGA))
                .value(subqueryVagasEstagio(query, criteriaBuilder)));
        }
    }

    private void filtroContratoEstudanteEmpresa(Root<ContratoEstudanteEmpresa> root, CriteriaBuilder criteriaBuilder, Predicate predicate) {
        boolean filtroIdContratoEstudanteEmpresaVazio = Objects.isNull(this.filter.getIdContratoEstudanteEmpresa());

        if (!filtroIdContratoEstudanteEmpresaVazio) {
            predicate.getExpressions().add(
                    criteriaBuilder.equal(root.get("id"), this.filter.getIdContratoEstudanteEmpresa())
            );
        }
    }

    private void filtroLocalContrato(Root<ContratoEstudanteEmpresa> root, CriteriaBuilder criteriaBuilder, Predicate predicate) {
        predicate.getExpressions().add(
            criteriaBuilder.equal(root.get("localContrato").get("id"), this.filter.getIdLocalContrato()));
    }

    private void filtroEmpresa(Root<ContratoEstudanteEmpresa> root, CriteriaBuilder criteriaBuilder,
            Predicate predicate) {
        Optional.ofNullable(filter.getNomeEmpresa()).ifPresent(param -> predicate.getExpressions()
                .add(criteriaBuilder.like(root.get("dadosEmpresa").get("nome"), "%" + param + "%")));

    }

    private void filtroEstudante(Root<ContratoEstudanteEmpresa> root, CriteriaBuilder criteriaBuilder, Predicate predicate, CriteriaQuery<?> query) {
        boolean filtroCodigoEstudanteVazio = Strings.isNullOrEmpty(this.filter.getCodigoEstudante());
        boolean filtroCpfVazio = Strings.isNullOrEmpty(this.filter.getCpfEstudante());
        boolean filtroNomeEstudanteVazio = Strings.isNullOrEmpty(this.filter.getNomeEstudante());
        boolean filtroNumeroAutorizacao = Objects.isNull(this.filter.getNumeroAutorizacao());

        if (filtroCodigoEstudanteVazio && filtroCpfVazio && filtroNomeEstudanteVazio && filtroNumeroAutorizacao) {
            return;
        }

        if (!filtroCodigoEstudanteVazio) {
            predicate.getExpressions().add(criteriaBuilder.equal(root.get(ESTUDANTE).get(CODIGO_ESTUDANTE), this.filter.getCodigoEstudante()));
        }

        if (!filtroCpfVazio) {
            predicate.getExpressions().add(criteriaBuilder.equal(root.get(ESTUDANTE).get(CPF_ESTUDANTE), this.filter.getCpfEstudante()));
        }

        if(!filtroNumeroAutorizacao){
            predicate.getExpressions().add(criteriaBuilder.in(root.join(DADOS_VAGA).get(CODIGO_VAGA)).value(subqueryVagasEstagio(query, criteriaBuilder)));
        }

        if (!filtroNomeEstudanteVazio) {
            predicate.getExpressions().add(
                    criteriaBuilder.or(
                            criteriaBuilder.like(root.get(ESTUDANTE).get(NOME_ESTUDANTE), SqlUtils.like(this.filter.getNomeEstudante())),
                            criteriaBuilder.like(root.get(ESTUDANTE).get(NOME_SOCIAL_ESTUDANTE), SqlUtils.like(this.filter.getNomeEstudante())))
            );
        }
    }
    
    private void filtroDataInicio(Root<ContratoEstudanteEmpresa> root, CriteriaBuilder criteriaBuilder, 
            Predicate predicate) {
        if (Objects.isNull(filter.getDataInicioDe()) || Objects.isNull(filter.getDataInicioAte())) {
            return;
        }
        Predicate dataAberturaPredicate = criteriaBuilder.between(
                root.get(DADOS_VAGA).get(DATA_INICIO),
                filter.getDataInicioDe(),
                filter.getDataInicioAte()
        );
        predicate.getExpressions().add(dataAberturaPredicate);
    }
       
    private void filtroDataTermino(Root<ContratoEstudanteEmpresa> root, CriteriaBuilder criteriaBuilder,
            Predicate predicate) {
        if (Objects.isNull(filter.getDataTerminoDe()) || Objects.isNull(filter.getDataTerminoAte())) {
            return;
        }

        Predicate dataAberturaPredicate = criteriaBuilder.between(
                root.get(DADOS_VAGA).get(DATA_FINAL),
                filter.getDataTerminoDe(),
                filter.getDataTerminoAte()
        );
        predicate.getExpressions().add(dataAberturaPredicate);
    }

    private void filtroSituacaoDoContrato(Root<ContratoEstudanteEmpresa> root, CriteriaBuilder builder, Predicate predicate) {
        predicate.getExpressions().add(builder.notEqual(root.get("situacao"), SituacaoContratoEstudanteEmpresa.EM_ALTERACAO));
    }

    private Subquery<Long> subqueryVagasEstagio(CriteriaQuery<?> query, CriteriaBuilder cb) {
        Subquery<Long> subquery = query.subquery(Long.class);
        Predicate predicate = cb.conjunction();
        Root<VagaEstagio> subRootVagaEstagio = subquery.from(VagaEstagio.class);
        if( Objects.isNull(filter.getNumeroAutorizacao())) {
        	subquery.select(subRootVagaEstagio.get(CODIGO_VAGA));
        	return subquery;        
        }
        predicate.getExpressions().add(cb.equal(subRootVagaEstagio.get(NUMERO_AUTORIZACAO) , filter.getNumeroAutorizacao()));
        subquery.where(predicate);
        subquery.select(subRootVagaEstagio.get(CODIGO_VAGA));
        return subquery;
    }



}
