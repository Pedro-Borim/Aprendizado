package br.org.ciee.kairos.vagas.business.service.contratoestudanteempresa;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.BooleanUtils;
import org.apache.commons.lang3.StringUtils;
import org.javers.common.collections.Lists;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import br.org.ciee.kairos.architecture.core.exception.BaseException;
import br.org.ciee.kairos.architecture.data.procedures.DesativarCaseSensitive;
import br.org.ciee.kairos.architecture.security.component.JwtRequestInfo;
import br.org.ciee.kairos.vagas.business.conectores.ConectorDocuments;
import br.org.ciee.kairos.vagas.business.exception.CieeNotFoundException;
import br.org.ciee.kairos.vagas.business.exception.ContratoNaoEncontradoException;
import br.org.ciee.kairos.vagas.business.exception.GrupoComponentesException;
import br.org.ciee.kairos.vagas.business.exception.TemplateNotFoundException;
import br.org.ciee.kairos.vagas.business.exception.contratoestudanteempresa.ContratoEstudanteEmpresaNotFoundException;
import br.org.ciee.kairos.vagas.business.exception.contratoestudanteempresa.ContratoEstudanteEstagioNotFoundException;
import br.org.ciee.kairos.vagas.business.exception.contratoestudanteempresa.DetalhesContratoUnprocessableException;
import br.org.ciee.kairos.vagas.business.exception.contratoestudanteempresa.InfoContratoEmpresaNotFoundException;
import br.org.ciee.kairos.vagas.business.mapper.utils.PageRequestMapper;
import br.org.ciee.kairos.vagas.business.model.dtos.contratoestudanteempresa.detalhescontrato.DetalhesContratoDTO;
import br.org.ciee.kairos.vagas.business.model.entity.Empresa;
import br.org.ciee.kairos.vagas.business.model.entity.Estudante;
import br.org.ciee.kairos.vagas.business.model.entity.RepLocalContrato;
import br.org.ciee.kairos.vagas.business.model.entity.contratacao.ContratoDocumento;
import br.org.ciee.kairos.vagas.business.model.entity.contratacao.DadosCampus;
import br.org.ciee.kairos.vagas.business.model.entity.contratacao.DadosEmpresa;
import br.org.ciee.kairos.vagas.business.model.entity.contrato.Contrato;
import br.org.ciee.kairos.vagas.business.model.entity.contrato.ContratoEstudanteEmpresa;
import br.org.ciee.kairos.vagas.business.model.entity.infocontratoempresa.InfoContratoEmpresa;
import br.org.ciee.kairos.vagas.business.model.entity.parametros.empresa.ParamsAssinaturaEmpresa;
import br.org.ciee.kairos.vagas.business.model.entity.parametros.ie.ParamsAssinaturaIE;
import br.org.ciee.kairos.vagas.business.model.entity.vagas.VagaAprendiz;
import br.org.ciee.kairos.vagas.business.repository.ContratoDocumentoRepository;
import br.org.ciee.kairos.vagas.business.repository.ContratoEstudanteEmpresaRepository;
import br.org.ciee.kairos.vagas.business.repository.ContratoRepository;
import br.org.ciee.kairos.vagas.business.repository.ContratoTARepository;
import br.org.ciee.kairos.vagas.business.repository.EstudanteRepository;
import br.org.ciee.kairos.vagas.business.repository.InfoContratoEmpresaRepository;
import br.org.ciee.kairos.vagas.business.repository.RepLocalContratoRepository;
import br.org.ciee.kairos.vagas.business.repository.SupervisorRepository;
import br.org.ciee.kairos.vagas.business.repository.parametro.assinatura.ParamsAssinaturaEmpresaRepository;
import br.org.ciee.kairos.vagas.business.repository.parametro.assinatura.ParamsAssinaturaIERepository;
import br.org.ciee.kairos.vagas.business.repository.specification.ContratoEstudanteEmpresaSpecification;
import br.org.ciee.kairos.vagas.business.service.contrato.GeradorPDFContratoService;
import br.org.ciee.kairos.vagas.business.service.vaga.aprendiz.VagaAprendizService;
import br.org.ciee.kairos.vagas.common.constant.TiposArquivosUpload;
import br.org.ciee.kairos.vagas.common.enums.contrato.SituacaoContratoEstudanteEmpresa;
import br.org.ciee.kairos.vagas.common.exception.AprendizJaRealizouCapacitacaoException;
import br.org.ciee.kairos.vagas.common.exception.ContratoNotFoundException;
import br.org.ciee.kairos.vagas.common.model.contratoestudanteempresa.ContratoEstudanteEmpresaFilter;
import br.org.ciee.kairos.vagas.common.model.contratoestudanteempresa.EmailContratoDTO;
import br.org.ciee.kairos.vagas.common.model.documentos.DocumentDTO;
import br.org.ciee.kairos.vagas.common.model.documentos.DocumentType;
import br.org.ciee.kairos.vagas.common.model.parametros.TipoContrato;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;

@Service
@RequiredArgsConstructor
public class ContratoEstudanteEmpresaService {
	
	private static final Logger LOG = LoggerFactory.getLogger(ContratoEstudanteEmpresaService.class);
    private static final String URI_DOCUMENTOS_ESTUDANTES = "documentos/visualizar/estudante";
    private static final String DIGITALIZADO = "DIGITALIZADO";
    private static final String NOME_ARQUIVO_PDF_TCE = "CONTRATO_TCE";
    private static final String NOME_ARQUIVO_PDF_TCA = "CONTRATO_TCA";

    private final ContratoEstudanteEmpresaRepository contratoEstudanteEmpresaRepository;
    private final ParamsAssinaturaEmpresaRepository paramsAssinaturaEmpresaRepository;
    private final ParamsAssinaturaIERepository paramsAssinaturaIERepository;
    private final GeradorPDFContratoService geradorPDFContratoService;
    private final ConectorDocuments conectorDocuments;
    private final ContratoDocumentoRepository contratoDocumentoRepository;
    private final EstudanteRepository estudanteRepository;
    private final RepLocalContratoRepository localContratoRepository;
    private final SupervisorRepository supervisorRepository;
    private final ContratoRepository contratoRepository;
    private final VagaAprendizService vagaAprendizService;
    private final JwtRequestInfo jwtRequestInfo;
    private final InfoContratoEmpresaRepository infoContratoEmpresaRepository;
    private final ContratoTARepository contratoTARepository;

    @Value("${application.base-url}")
    private String baseUrl;

    public List<ContratoEstudanteEmpresa> buscarContratosPorEstudante(Long idEstudante, Boolean ativo) {

        if (ativo) {
            return contratoEstudanteEmpresaRepository.contratosAtivosPorEstudante(idEstudante);
        } else {
            return contratoEstudanteEmpresaRepository.findByEstudanteIdOrderByDadosVagaDataInicioDesc(idEstudante);
        }

    }

    @DesativarCaseSensitive
    public Page<ContratoEstudanteEmpresa> buscarComFiltros(ContratoEstudanteEmpresaFilter filtro, Pageable pageable) {
        Pageable page = this.mapearOrdenacao(pageable);
        return this.contratoEstudanteEmpresaRepository.findAll(new ContratoEstudanteEmpresaSpecification(filtro, jwtRequestInfo.isPCD()), page);
    }
    
    public ContratoEstudanteEmpresa detalhar(Long codigoEstudante, Long codigoVaga, Long idContratoEstudanteEmpresa)
            throws ContratoNotFoundException {
        if (Objects.nonNull(idContratoEstudanteEmpresa)) {
            return this.contratoEstudanteEmpresaRepository
                    .findByIdAndEstudanteIdAndDadosVagaCodigoVaga(idContratoEstudanteEmpresa, codigoEstudante,
                            codigoVaga)
                    .orElseThrow(ContratoNotFoundException::new);
        }
        return this.contratoEstudanteEmpresaRepository
                .findByEstudanteIdAndDadosVagaCodigoVaga(codigoEstudante, codigoVaga)
                .orElseThrow(ContratoNotFoundException::new);
    }

    private Pageable mapearOrdenacao(Pageable page) {

        HashMap<String, String> mapper = new HashMap<>();

        mapper.put("numeroContrato", "id");
        mapper.put("nomeEmpresa", "dadosEmpresa.nome");
        mapper.put("nomeEstudante", "estudante.nome");
        mapper.put("cpfEstudante", "dadosEstudante.cpf");
        mapper.put("dataInicio", "dadosVaga.dataInicio");
        mapper.put("dataFim", "dadosVaga.dataFinal");
        mapper.put("dataRescisao", "dataRescisao");

        return new PageRequestMapper(page).mapSortParams(mapper);
    }

    public ContratoEstudanteEmpresa buscarContratoEstagioPorId(Long id) throws ContratoNotFoundException {
        return contratoEstudanteEmpresaRepository.findByIdAndTipoContrato(id, TipoContrato.ESTAGIO)
                .orElseThrow(ContratoNotFoundException::new);
    }

    public ContratoEstudanteEmpresa buscarContratoEstudEmpPorId(Long id) throws ContratoNotFoundException {
        return this.contratoEstudanteEmpresaRepository.findById(id)
                .orElseThrow(ContratoNotFoundException::new);
    }

    @Transactional
    public Long buscarIdDocumentoContrato(Long idContrato, Boolean quebraClausula) throws ParseException, CieeNotFoundException,
            ContratoEstudanteEmpresaNotFoundException, GrupoComponentesException, TemplateNotFoundException {
        List<ContratoDocumento> contratoDocumentos = contratoDocumentoRepository
                .buscarDocumentosPorContratoETipo(idContrato, Arrays.asList("CONTRATO_TCE"));
        ContratoDocumento contratoDocumento = Optional.ofNullable(contratoDocumentos).orElse(Collections.emptyList())
                .stream().findFirst().orElse(null);
        if (Objects.nonNull(contratoDocumento)) {
            return contratoDocumento.getIdDocumento();
        }

        DocumentDTO documento = gerarContratoPDF(idContrato, quebraClausula);
        ContratoEstudanteEmpresa contratoEstudanteEmpresa = contratoEstudanteEmpresaRepository.findById(idContrato)
                .orElse(null);
        contratoDocumentoRepository.save(mapToEntity(documento, contratoEstudanteEmpresa));
        salvarVinculosDocumento(documento, contratoEstudanteEmpresa);
        return documento.getIdDocumento();

    }

    private void salvarVinculosDocumento(DocumentDTO documento, ContratoEstudanteEmpresa contratoEstudanteEmpresa) {
        salvarVinculoDocumentosEstudantes(documento.getIdDocumento(), buscarIdAuthEstudante(contratoEstudanteEmpresa));
        
        if (contratoEstudanteEmpresa.getTipoContrato().equals(TipoContrato.ESTAGIO)) {
        	DadosCampus dadosCampus = contratoEstudanteEmpresa.getDadosEstudante().getDadosCampus();
        	salvarVinculoDocumentosEscolas(documento.getIdDocumento(), dadosCampus.getIdIe(), dadosCampus.getIdCampus(), null);
        }
        
        RepLocalContrato localContrato = contratoEstudanteEmpresa.getLocalContrato();
        DadosEmpresa dadosEmpresa = contratoEstudanteEmpresa.getDadosEmpresa();
        salvarVinculoDocumentosEmpresas(documento.getIdDocumento(), dadosEmpresa.getId(),
                localContrato.getContrato().getId(),
                localContrato.getId());
    }

    private Long buscarIdAuthEstudante(ContratoEstudanteEmpresa contratoEstudanteEmpresa) {
        return buscarEstudante(contratoEstudanteEmpresa.getDadosEstudante().getId()).getIdUsuarioAuth();
    }

    private String montarUrlSegura(Long id) {
        return StringUtils.join(this.baseUrl, "/", this.URI_DOCUMENTOS_ESTUDANTES, "/", id);
    }

    private void salvarVinculoDocumentosEstudantes(Long idDocumento, Long idUsuario) {
        /* Data da vigencia é nula pois são documentos que ainda não terão controler de vigencia */
        conectorDocuments.salvarVinculoEstudanteDocumento(idDocumento, Lists.asList(idUsuario), null);
    }

    private void salvarVinculoDocumentosEscolas(Long idDocumento, Long idIe, Long idCampus, Long idCampusCurso) {
        /* Data da vigencia é nula pois são documentos que ainda não terão controler de vigencia */
        conectorDocuments.salvarVinculoEscolaDocumento(idDocumento, idIe, idCampus, idCampusCurso, null);
    }

    private void salvarVinculoDocumentosEmpresas(Long idDocumento, Long idEmpresa, Long idContrato, Long idLocalContrato) {
        /* Data da vigencia é nula pois são documentos que ainda não terão controler de vigencia */
        conectorDocuments.salvarVinculoEmpresaDocumento(idDocumento, idEmpresa, idContrato, idLocalContrato, null);
    }

    public List<ContratoEstudanteEmpresa> buscarContratosPorIdEstudante(Long idEstudante) {
        return contratoEstudanteEmpresaRepository.findByEstudanteId(idEstudante);
    }

    private ContratoDocumento mapToEntity(DocumentDTO documentDTO, ContratoEstudanteEmpresa contratoEstudanteEmpresa) {
        return ContratoDocumento.builder()
                .idDocumento(documentDTO.getIdDocumento())
                .contratoEstudanteEmpresa(contratoEstudanteEmpresa)
                .tipoDocumento(Optional.ofNullable(documentDTO.getTipoDocumento())
                        .map(DocumentType::getIdentifier).orElse(null))
                .build();
    }

    private DocumentDTO gerarContratoPDF(Long idContrato, Boolean quebraClausula) throws ParseException, CieeNotFoundException, ContratoEstudanteEmpresaNotFoundException, GrupoComponentesException, TemplateNotFoundException {
        try {
            Resource pdf = geradorPDFContratoService.gerarPDFContrato(idContrato, null, quebraClausula);
            ContratoEstudanteEmpresa contratoEstudanteEmpresa = 
            contratoEstudanteEmpresaRepository.findById(idContrato).orElseThrow(ContratoEstudanteEmpresaNotFoundException::new);
                      
            String nomeArquivoPDF = NOME_ARQUIVO_PDF_TCE;
            if (TipoContrato.APRENDIZ.equals(contratoEstudanteEmpresa.getTipoContrato())) {
            	nomeArquivoPDF = NOME_ARQUIVO_PDF_TCA;
            }
            
            File tempFile = File.createTempFile(nomeArquivoPDF, TiposArquivosUpload.PDF);
            IOUtils.copy(pdf.getInputStream(), new FileOutputStream(tempFile));
            return conectorDocuments.upload(tempFile, nomeArquivoPDF);

        } catch (IOException e) {
            throw new RuntimeException("Erro ao gerar contrato de estágio", e.getCause());
        }
    }

    public Estudante buscarEstudante(Long idEstudante) {
        return estudanteRepository.findById(idEstudante).orElse(null);
    }

    public RepLocalContrato buscarLocalContrato(Long idLocalContrato) {
        return localContratoRepository.findById(idLocalContrato).orElse(null);
    }
    
    public Empresa buscarEmpresa(Long idContrato) {        
        return contratoRepository.findById(idContrato)
                .map(Contrato::buscarInfoContratoEmpresaPrincipal)
                .map(InfoContratoEmpresa::getEmpresa)
                .orElse(null);       
    }

    public ContratoEstudanteEmpresa buscarPorId(Long idContratoEstudanteEmpresa) throws ContratoNotFoundException {
        return contratoEstudanteEmpresaRepository.findById(idContratoEstudanteEmpresa)
                .orElseThrow(ContratoNotFoundException::new);
    }

    @Transactional
    public void alterarEmailResponsavel(
            Long idContrato,
            EmailContratoDTO emailResponsavel) throws ContratoNotFoundException {

        this.contratoEstudanteEmpresaRepository.findById(idContrato)
                .orElseThrow(ContratoNotFoundException::new);

        this.contratoEstudanteEmpresaRepository
                .alterarEmailResponsavel(idContrato, emailResponsavel.getEmail());

    }

    @Transactional
    public void alterarEmailSupervisor(
            Long idContrato,
            EmailContratoDTO emailResponsavel) throws ContratoNotFoundException {

        ContratoEstudanteEmpresa contratoEstudanteEmpresa = this.contratoEstudanteEmpresaRepository.findById(idContrato)
                .orElseThrow(ContratoNotFoundException::new);

        this.contratoEstudanteEmpresaRepository
                .alterarEmailSupervisor(idContrato, emailResponsavel.getEmail());

        this.supervisorRepository.alterarEmail(contratoEstudanteEmpresa
                .getDadosVaga().getSupervisor().getId(), emailResponsavel.getEmail());
    }

    public ContratoEstudanteEmpresa salvar(ContratoEstudanteEmpresa contratoEstudanteEmpresa) {
        return this.contratoEstudanteEmpresaRepository.save(contratoEstudanteEmpresa);
    }

    public boolean contratoPassivelDeAssinaturaEletronica(Long idContratoEstudanteEmpresa) throws ContratoEstudanteEmpresaNotFoundException {
        ContratoEstudanteEmpresa contratoEstudanteEmpresa = buscarContrato(idContratoEstudanteEmpresa);
        return contratoPassivelDeAssinaturaEletronica(contratoEstudanteEmpresa, false);
    }

    public boolean contratoPassivelDeAssinaturaEletronica(ContratoEstudanteEmpresa contratoEstudanteEmpresa, Boolean reemisssao) {
        if (!reemisssao) {
            if (contratoEstudanteEmpresa.getChaveDocumentoAssinado() != null && DIGITALIZADO.equals(contratoEstudanteEmpresa.getChaveDocumentoAssinado())) {
                return Boolean.FALSE;
            }
        }

        ParamsAssinaturaEmpresa assinaturaEmpresa = paramsAssinaturaEmpresaRepository.findByContratoId(
                contratoEstudanteEmpresa.getLocalContrato().getContrato().getId()).orElse(null);

        if (Objects.nonNull(assinaturaEmpresa) && BooleanUtils.isFalse(assinaturaEmpresa.getAssinaEletronicamente())) {
            return Boolean.FALSE;
        }

        Long idIE = Optional.ofNullable(contratoEstudanteEmpresa.getDadosEstudante().getDadosCampus())
                .map(DadosCampus::getIdIe).orElse(null);

        ParamsAssinaturaIE assinaturaIE = paramsAssinaturaIERepository.findByInstituicaoEnsinoId(idIE).orElse(null);

        if (Objects.nonNull(assinaturaIE) && BooleanUtils.isFalse(assinaturaIE.getAssinaEletronicamente())) {
            return Boolean.FALSE;
        }

        return Boolean.TRUE;
    }

    public ContratoEstudanteEmpresa buscarContrato(Long idContratoEstudanteEmpresa) throws ContratoEstudanteEmpresaNotFoundException {
        return this.contratoEstudanteEmpresaRepository.findById(idContratoEstudanteEmpresa)
                .orElseThrow(ContratoEstudanteEmpresaNotFoundException::new);
    }

    public ContratoEstudanteEmpresa buscarContrato(String chaveDocusign) throws ContratoEstudanteEmpresaNotFoundException {
        return this.contratoEstudanteEmpresaRepository.findByChaveDocumentoAssinado(chaveDocusign)
                .orElseThrow(ContratoEstudanteEmpresaNotFoundException::new);
    }
    
    public ContratoEstudanteEmpresa buscarContratoOuTA(String chaveDocusign) throws ContratoEstudanteEmpresaNotFoundException {
    	Optional<ContratoEstudanteEmpresa> contratoEstEmp = this.contratoEstudanteEmpresaRepository.findByChaveDocumentoAssinado(chaveDocusign);	
    	return contratoEstEmp.isPresent() ? contratoEstEmp.get() : buscarContratoPorChaveDocusignTA(chaveDocusign);
    }

    private ContratoEstudanteEmpresa buscarContratoPorChaveDocusignTA(String chaveDocusign) {
    	return contratoTARepository.findContEstEmpBychaveDocumentoAssinadoTA(chaveDocusign)
    			.orElseThrow(ContratoEstudanteEmpresaNotFoundException::new);
    }
    
    public boolean contratoEstaPendente(ContratoEstudanteEmpresa contratoEstudanteEmpresa) {
        if (contratoEstudanteEmpresa.getEmissaoDocumentoPendente() == null) {
            return Boolean.TRUE;
        }

        return BooleanUtils.isTrue(contratoEstudanteEmpresa.getEmissaoDocumentoPendente());
    }

    public boolean contratoFoiEmitidoParaAssinaturaEletronica(ContratoEstudanteEmpresa contratoEstudanteEmpresa) {
        return StringUtils.isNotEmpty(contratoEstudanteEmpresa.getChaveDocumentoAssinado());
    }

    @Transactional
    public void atualizarEmailEstudante(Long idContratoEstudanteEmpresa, String email) {
        if (this.contratoEstudanteEmpresaRepository.existsById(idContratoEstudanteEmpresa)) {
            this.contratoEstudanteEmpresaRepository.alterarEmailEstudante(idContratoEstudanteEmpresa, email);
        } else {
            throw new ContratoNaoEncontradoException();
        }
    }

    public ContratoEstudanteEmpresa buscarContratoEstEmpAprendizPorIdEstudante(Long idEstudante) throws ContratoEstudanteEmpresaNotFoundException {
        return contratoEstudanteEmpresaRepository.buscarAprendizPorIdEstudante(idEstudante, LocalDate.now()).stream()
                .findFirst()
                .orElseThrow(ContratoEstudanteEmpresaNotFoundException::new);
    }

    public void validarContratacaoAprendiz(String codigoEstudante, Long codigoVaga) throws BaseException {
        Long idCurso = obterCursoCapacitacaoFromCodigoVaga(codigoVaga);
        if (estudanteJaFoiCapacitadoParaOCurso(codigoEstudante, idCurso))
            throw new AprendizJaRealizouCapacitacaoException();

    }

    private Boolean estudanteJaFoiCapacitadoParaOCurso(String codigoEstudante, Long idCurso) {
        List<ContratoEstudanteEmpresa> contratoEstEmpr = contratoEstudanteEmpresaRepository.buscarAprendizPorCodigoEstudante(codigoEstudante);
        return contratoEstEmpr.stream()
                .anyMatch(contratoEstudanteEmpresa -> idCurso.equals(contratoEstudanteEmpresa.getContratoCursoCapacitacao().getIdCursoCapacitacao()));
    }

    private Long obterCursoCapacitacaoFromCodigoVaga(Long codigoVaga) throws BaseException {
        VagaAprendiz vaga = vagaAprendizService.buscaPorCodigo(codigoVaga);
        return vaga.getEscolaridadeCandidato().getTurmaRegular().getIdDuracoesCapacitacao();
    }

    @Transactional
    public String buscarUrlSeguraContrato(Long idContrato) throws ParseException, CieeNotFoundException, ContratoEstudanteEmpresaNotFoundException, GrupoComponentesException, TemplateNotFoundException, ContratoNotFoundException {
        List<ContratoDocumento> contratoDocumentos = contratoDocumentoRepository.buscarDocumentosPorContratoETipo(idContrato, Arrays.asList("CONTRATO_TCE"));
        ContratoDocumento contratoDocumento = Optional.ofNullable(contratoDocumentos)
                .orElse(Collections.emptyList())
                .stream()
                .findFirst()
                .orElse(null);
        if (Objects.nonNull(contratoDocumento)) {
            return montarUrlSegura(contratoDocumento.getIdDocumento());
        }

        DocumentDTO documento = gerarContratoPDF(idContrato, false);
        ContratoEstudanteEmpresa contratoEstudanteEmpresa = contratoEstudanteEmpresaRepository.findById(idContrato).orElseThrow(ContratoNotFoundException::new);
        contratoDocumentoRepository.save(mapToEntity(documento, contratoEstudanteEmpresa));
        salvarVinculosDocumento(documento, contratoEstudanteEmpresa);
        return montarUrlSegura(documento.getIdDocumento());

    }

    public void atualizarSituacaoParaEfetivado(Long idContratoEstudanteEmpresa) {
        ContratoEstudanteEmpresa contratoEstudanteEmpresa = buscarContrato(idContratoEstudanteEmpresa);
        atualizarSituacaoDataBaixaContrato(contratoEstudanteEmpresa, SituacaoContratoEstudanteEmpresa.EFETIVADO);
    }

    public void atualizarSituacaoParaEfetivadoPorCodigoDocusign(String chaveDocusign) {
    	LOG.info("Busca contrato de estudante e empresa pela chave Docusign {}", chaveDocusign);
        ContratoEstudanteEmpresa contratoEstudanteEmpresa = buscarContratoOuTA(chaveDocusign);
        LOG.info("Contrato encontrado pela chave Docusign: {}", contratoEstudanteEmpresa);
        LOG.info("Atualiza Relatório do Estudante");
        atualizarSituacaoDataBaixaContrato(contratoEstudanteEmpresa, SituacaoContratoEstudanteEmpresa.EFETIVADO);
        LOG.info("Situação do contrato de id {} mudado para efetivado.", contratoEstudanteEmpresa.getId());
    }
    
    public ContratoEstudanteEmpresa atualizarSituacaoParaEfetivadoPorCodigoDocusignRetornandoContrato(String chaveDocusign) {
    	LOG.info("Busca contrato de estudante e empresa pela chave Docusign {}", chaveDocusign);
        ContratoEstudanteEmpresa contratoEstudanteEmpresa = buscarContratoOuTA(chaveDocusign);
        LOG.info("Contrato encontrado pela chave Docusign: {}", contratoEstudanteEmpresa);
        LOG.info("Atualiza Relatório do Estudante");
        atualizarSituacaoDataBaixaContrato(contratoEstudanteEmpresa, SituacaoContratoEstudanteEmpresa.EFETIVADO);
        LOG.info("Situação do contrato de id {} mudado para efetivado.", contratoEstudanteEmpresa.getId());
        return contratoEstudanteEmpresa;
    }

    private void atualizarSituacaoDataBaixaContrato(ContratoEstudanteEmpresa contratoEstudanteEmpresa, SituacaoContratoEstudanteEmpresa situacao) {
        contratoEstudanteEmpresa.setSituacao(situacao);
        contratoEstudanteEmpresa.setDataBaixa(ZonedDateTime.now().toLocalDate());
        contratoEstudanteEmpresaRepository.saveAndFlush(contratoEstudanteEmpresa);
    }

    @Transactional
    public ContratoEstudanteEmpresa buscarContratoEstudEmpVagaPorId(Long idContratoEstudanteEmpresa) throws BaseException {
        return this.contratoEstudanteEmpresaRepository.findByIdAndTipoContrato(idContratoEstudanteEmpresa, TipoContrato.ESTAGIO)
                .orElseThrow(ContratoEstudanteEstagioNotFoundException::new);
    }

    public DetalhesContratoDTO buscarInformacoesAdicionaisContratoEmpresa(Long contratoEmpresaEstudanteId) throws BaseException {
        ContratoEstudanteEmpresa contratoEstudanteEmpresa = contratoEstudanteEmpresaRepository.findById(contratoEmpresaEstudanteId).orElseThrow(ContratoNotFoundException::new);
        if(Objects.isNull(contratoEstudanteEmpresa.getLocalContrato())
                || Objects.isNull(contratoEstudanteEmpresa.getLocalContrato().getContrato())
                ||Objects.isNull(contratoEstudanteEmpresa.getDadosEmpresa())) {
            throw new DetalhesContratoUnprocessableException();
        }

        InfoContratoEmpresa infoContratoEmpresa= infoContratoEmpresaRepository.findByEmpresaIdAndContratoIdAndPrincipalTrue(
                contratoEstudanteEmpresa.getDadosEmpresa().getId(),
                contratoEstudanteEmpresa.getLocalContrato().getContrato().getId())
                .orElseThrow(InfoContratoEmpresaNotFoundException::new);

        return DetalhesContratoDTO.builder()
                .infoContratoEmpresa(infoContratoEmpresa)
                .contratoEstudante(contratoEstudanteEmpresa)
                .build();
    }
    
    public List<ContratoEstudanteEmpresa> buscarContratosAtivosPorIdEstudante(Long idEstudante) {
    	List<ContratoEstudanteEmpresa> contratosAprendizAtivos = this.contratoEstudanteEmpresaRepository.buscarAprendizPorIdEstudante(idEstudante, LocalDate.now());
    	List<ContratoEstudanteEmpresa> contratosEstagioAtivos = this.contratoEstudanteEmpresaRepository.buscarEstagiarioAtivoPorIdEstudante(idEstudante, LocalDate.now());
    	contratosAprendizAtivos.addAll(contratosEstagioAtivos);
    	return contratosAprendizAtivos;
    }
    
    public List<ContratoEstudanteEmpresa> buscarContratosAtivosPorCpfELocalContrato(Long idLocalContrato, String cpfEstudante) {
    	List<ContratoEstudanteEmpresa> contratosAprendizAtivos = this.contratoEstudanteEmpresaRepository.buscarContratoPorCpfAndIdLocalContrato(idLocalContrato, cpfEstudante);
    	if(contratosAprendizAtivos.isEmpty()) {
    		throw new ContratoEstudanteEmpresaNotFoundException();
    	}
    	return contratosAprendizAtivos;
    }
    
    @SneakyThrows
    public ContratoEstudanteEmpresa buscarPorMatriculaRH(Long matriculaRH) throws ContratoEstudanteEmpresaNotFoundException {
        return this.contratoEstudanteEmpresaRepository.findByMatriculaRH(matriculaRH)
                .orElseThrow(ContratoEstudanteEmpresaNotFoundException::new);
    }
}
