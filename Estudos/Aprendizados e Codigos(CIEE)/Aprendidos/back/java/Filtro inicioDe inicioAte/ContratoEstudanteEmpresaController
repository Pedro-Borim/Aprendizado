package br.org.ciee.kairos.vagas.api.controller.contrato.estudanteempresa;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.apache.logging.log4j.util.Strings;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;

import br.org.ciee.kairos.architecture.core.exception.BaseException;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.ContratoEstudanteEmpresaContractService;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.ContratoEstudanteEmpresaDTO;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.ContratoEstudanteEmpresaESocialDTO;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.ContratoEstudanteValorBolsaDTO;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.DetalhesContratoEstudanteEmpresaDTO;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.cancelamentorescisao.model.DetalheContratoRescindidoResponse;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.model.ContratoEstudanteEmpresaParametrosDTO;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.model.DetalhesContratoEstudanteDTO;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.model.DetalhesTCEResponse;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.model.DocumentoContratoEstudanteEmpresaDTO;
import br.org.ciee.kairos.vagas.api.exception.EstudanteSemPermissaoContratoException;
import br.org.ciee.kairos.vagas.api.exception.UsuarioSemPermissaoLocalContratoException;
import br.org.ciee.kairos.vagas.api.mapper.contrato.DetalhesContratoEstudanteMapper;
import br.org.ciee.kairos.vagas.api.mapper.contratoestudanteempresa.ContratoEstudanteEmpresaMapper;
import br.org.ciee.kairos.vagas.api.utils.ValidacaoUsuario;
import br.org.ciee.kairos.vagas.business.exception.CieeNotFoundException;
import br.org.ciee.kairos.vagas.business.exception.GrupoComponentesException;
import br.org.ciee.kairos.vagas.business.exception.TemplateNotFoundException;
import br.org.ciee.kairos.vagas.business.exception.contratoestudanteempresa.ContratoEstudanteEmpresaNotFoundException;
import br.org.ciee.kairos.vagas.business.exception.contratoestudanteempresa.InfoContratoEmpresaNotFoundException;
import br.org.ciee.kairos.vagas.business.model.dtos.esocial.DadosESocialDTO;
import br.org.ciee.kairos.vagas.business.model.entity.Empresa;
import br.org.ciee.kairos.vagas.business.model.entity.EscolaridadeEstudante;
import br.org.ciee.kairos.vagas.business.model.entity.EstadosUf;
import br.org.ciee.kairos.vagas.business.model.entity.Estudante;
import br.org.ciee.kairos.vagas.business.model.entity.MapCarteiraTerritorio;
import br.org.ciee.kairos.vagas.business.model.entity.Municipio;
import br.org.ciee.kairos.vagas.business.model.entity.RepEnderecoEscola;
import br.org.ciee.kairos.vagas.business.model.entity.RepGerencia;
import br.org.ciee.kairos.vagas.business.model.entity.RepInstituicoeEnsino;
import br.org.ciee.kairos.vagas.business.model.entity.RepLocalContrato;
import br.org.ciee.kairos.vagas.business.model.entity.RepLocalEndereco;
import br.org.ciee.kairos.vagas.business.model.entity.Superintendencias;
import br.org.ciee.kairos.vagas.business.model.entity.UnidadeCiee;
import br.org.ciee.kairos.vagas.business.model.entity.areaatuacaoestagio.RepAreasAtuacaoCursos;
import br.org.ciee.kairos.vagas.business.model.entity.areaatuacaoestagio.RepAreasAtuacaoEstagio;
import br.org.ciee.kairos.vagas.business.model.entity.areaatuacaoestagio.RepCursos;
import br.org.ciee.kairos.vagas.business.model.entity.areaatuacaoestagio.RepEnderecos;
import br.org.ciee.kairos.vagas.business.model.entity.contratacao.DadosCampus;
import br.org.ciee.kairos.vagas.business.model.entity.contratacao.DadosVagaContratacao;
import br.org.ciee.kairos.vagas.business.model.entity.contrato.ContratoEstudanteEmpresa;
import br.org.ciee.kairos.vagas.business.model.entity.curso.capacitacao.CursoCapacitacao;
import br.org.ciee.kairos.vagas.business.model.entity.dependente.Dependente;
import br.org.ciee.kairos.vagas.business.model.entity.paramciee.CieeParametersModel;
import br.org.ciee.kairos.vagas.business.repository.CursoCapacitacaoRepository;
import br.org.ciee.kairos.vagas.business.repository.EstadosUfRepository;
import br.org.ciee.kairos.vagas.business.repository.MapCarteiraTerritorioRepository;
import br.org.ciee.kairos.vagas.business.repository.MunicipioRepository;
import br.org.ciee.kairos.vagas.business.repository.RepAreasAtuacaoCursosRepository;
import br.org.ciee.kairos.vagas.business.repository.RepInstituicaoEnsinoRepository;
import br.org.ciee.kairos.vagas.business.repository.SuperintendenciaRepository;
import br.org.ciee.kairos.vagas.business.repository.UnidadeCieeRepository;
import br.org.ciee.kairos.vagas.business.repository.dependente.DependenteRepository;
import br.org.ciee.kairos.vagas.business.service.contratacao.EmailContratacaoDiretaService;
import br.org.ciee.kairos.vagas.business.service.contrato.GeradorPDFContratoService;
import br.org.ciee.kairos.vagas.business.service.contratoestudanteempresa.ContratoEstudanteEmpresaService;
import br.org.ciee.kairos.vagas.business.service.email.dtos.ContratacaoDiretaEntidadesEmailsDTO;
import br.org.ciee.kairos.vagas.business.service.vaga.estagio.VagaEstagioService;
import br.org.ciee.kairos.vagas.business.ura.service.ParametrosCieeService;
import br.org.ciee.kairos.vagas.business.ura.service.ParametrosComunicacaoService;
import br.org.ciee.kairos.vagas.common.enums.contrato.TipoServico;
import br.org.ciee.kairos.vagas.common.exception.ContratoNotFoundException;
import br.org.ciee.kairos.vagas.common.model.Esocial.DependenteEstudanteEsocialDTO;
import br.org.ciee.kairos.vagas.common.model.Esocial.EnderecoLocalContratoEsocialDTO;
import br.org.ciee.kairos.vagas.common.model.Esocial.UnidadeCieeEsocialDTO;
import br.org.ciee.kairos.vagas.common.model.contratoestudanteempresa.ContratoEstudanteEmpresaFilter;
import br.org.ciee.kairos.vagas.common.model.contratoestudanteempresa.EmailContratoDTO;
import br.org.ciee.kairos.vagas.common.model.parametros.TipoContrato;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.log4j.Log4j2;

@RestController
@Api("Endpoint para Contratos de Estagi√°rios e Aprendizes ")
@Log4j2
public class ContratoEstudanteEmpresaController implements ContratoEstudanteEmpresaContractService {

	private final ContratoEstudanteEmpresaService contratoEstudanteEmpresaService;
	private final ContratoEstudanteEmpresaMapper contratoEstudanteEmpresaMapper;
	private final ValidacaoUsuario validacaoUsuario;
	private final DetalhesContratoEstudanteMapper detalhesContratoEstudanteMapper;
	private final GeradorPDFContratoService geradorPDFContratoService;
	private final EmailContratacaoDiretaService enviarEmailContratacaoDiretaService;
	private final ParametrosComunicacaoService parametrosComunicacaoService;
	private final ParametrosCieeService paramCieeService;
	private final RepInstituicaoEnsinoRepository ieRepository;
	private final MapCarteiraTerritorioRepository mapCarteiraTerritorioRepository;
	private final CursoCapacitacaoRepository cursoCapacitacaoRepository;
	private final VagaEstagioService vagaEstagioService;
	private final MunicipioRepository municipioRepository;
	private final SuperintendenciaRepository superintendenciaRepository;
	private final EstadosUfRepository estadosUfRepository;
	private final DependenteRepository dependenteRepository;
	private final UnidadeCieeRepository unidadeCieeRepository;
	private final RepAreasAtuacaoCursosRepository repAreasAtuacaoCursosRepository;

	public ContratoEstudanteEmpresaController(ContratoEstudanteEmpresaService contratoEstudanteEmpresaService,
			ContratoEstudanteEmpresaMapper contratoEstudanteEmpresaMapper,
			DetalhesContratoEstudanteMapper detalhesContratoEstudanteMapper, ValidacaoUsuario validacaoUsuario,
			GeradorPDFContratoService geradorPDFContratoService,
			EmailContratacaoDiretaService enviarEmailContratacaoDiretaService,
			ParametrosComunicacaoService parametrosComunicacaoService, ParametrosCieeService paramCieeService,
			RepInstituicaoEnsinoRepository ieRepository,
			MapCarteiraTerritorioRepository mapCarteiraTerritorioRepository,
			CursoCapacitacaoRepository cursoCapacitacaoRepository, VagaEstagioService vagaEstagioService,
			MunicipioRepository municipioRepository, SuperintendenciaRepository superintendenciaRepository,
			EstadosUfRepository estadosUfRepository,
			DependenteRepository dependenteRepository,
			UnidadeCieeRepository unidadeCieeRepository,
			RepAreasAtuacaoCursosRepository repAreasAtuacaoCursosRepository) {
		this.contratoEstudanteEmpresaService = contratoEstudanteEmpresaService;
		this.contratoEstudanteEmpresaMapper = contratoEstudanteEmpresaMapper;
		this.detalhesContratoEstudanteMapper = detalhesContratoEstudanteMapper;
		this.validacaoUsuario = validacaoUsuario;
		this.geradorPDFContratoService = geradorPDFContratoService;
		this.enviarEmailContratacaoDiretaService = enviarEmailContratacaoDiretaService;
		this.parametrosComunicacaoService = parametrosComunicacaoService;
		this.paramCieeService = paramCieeService;
		this.ieRepository = ieRepository;
		this.mapCarteiraTerritorioRepository = mapCarteiraTerritorioRepository;
		this.cursoCapacitacaoRepository = cursoCapacitacaoRepository;
		this.vagaEstagioService = vagaEstagioService;
		this.municipioRepository = municipioRepository;
		this.superintendenciaRepository = superintendenciaRepository;
		this.estadosUfRepository = estadosUfRepository;
		this.dependenteRepository = dependenteRepository;
		this.unidadeCieeRepository = unidadeCieeRepository;
		this.repAreasAtuacaoCursosRepository = repAreasAtuacaoCursosRepository;
	}

	@Override
	@ApiOperation("Buscar contratos associados a um estudante")
	public ResponseEntity<List<br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.ContratoEstudanteEmpresaDTO>> buscarContratoPorEstudante(
			@RequestHeader("Authorization") String token,
			@PathVariable("idEstudante") @ApiParam(value = "id do estudante") Long idEstudante,
			@RequestParam(defaultValue = "false") Boolean ativo) throws ParseException {

		if (!validacaoUsuario.usuarioLogadoTemPermissaoEstudante(idEstudante, token)) {
			throw new EstudanteSemPermissaoContratoException();
		}

		List<ContratoEstudanteEmpresa> listaContratoEstudanteEmpresa = contratoEstudanteEmpresaService
				.buscarContratosPorEstudante(idEstudante, ativo);
		return ResponseEntity.ok(contratoEstudanteEmpresaMapper.convertTransferObject(listaContratoEstudanteEmpresa));

	}

	@Override
	public ResponseEntity<Page<ContratoEstudanteEmpresaDTO>> buscar(@RequestHeader("Authorization") String token,
			@PathVariable("codigoLocalContrato") Long codigoLocalContrato, ContratoEstudanteEmpresaFilter filtro,
			Pageable pageable) throws ParseException {
		if (!validacaoUsuario.usuarioLogadoTemPermissaoLocalContrato(codigoLocalContrato, token)) {
			throw new UsuarioSemPermissaoLocalContratoException();
		}
		filtro.setIdLocalContrato(codigoLocalContrato);

		Page<ContratoEstudanteEmpresa> contratoEstudanteEmpresaDTO = this.contratoEstudanteEmpresaService
				.buscarComFiltros(filtro, pageable);
		return ResponseEntity.ok(contratoEstudanteEmpresaDTO
				.map(contrato -> contratoEstudanteEmpresaMapper.mapearContratoParaDTO(contrato)));
	}

	@Override
	public ResponseEntity<DetalhesContratoEstudanteDTO> detalharContratoEstudante(@PathVariable Long codigoEstudante,
			@PathVariable Long codigoVaga) throws ContratoNotFoundException {
		return ResponseEntity.ok(this.detalhesContratoEstudanteMapper.convertTransferObject(
				this.contratoEstudanteEmpresaService.detalhar(codigoEstudante, codigoVaga, null)));

	}

	@Override
	public ResponseEntity<DetalhesContratoEstudanteDTO> detalharDadosContratoEstudante(
			@PathVariable Long codigoEstudante, @PathVariable Long codigoVaga,
			@RequestParam Long idContratoEstudanteEmpresa) throws ContratoNotFoundException {
		return ResponseEntity
				.ok(this.detalhesContratoEstudanteMapper.convertTransferObject(this.contratoEstudanteEmpresaService
						.detalhar(codigoEstudante, codigoVaga, idContratoEstudanteEmpresa)));

	}

	@Override
	public ResponseEntity<ContratoEstudanteEmpresaDTO> obterContratoEstudanteEmpresa(
			@PathVariable Long idContratoEstudanteEmpresa) throws ContratoNotFoundException {

		return ResponseEntity.ok(this.contratoEstudanteEmpresaMapper.convertTransferObject(
				this.contratoEstudanteEmpresaService.buscarContratoEstudEmpPorId(idContratoEstudanteEmpresa)));

	}

	@Override
	@ApiOperation(value = "Imprimir o Contrato")
	public ResponseEntity<DocumentoContratoEstudanteEmpresaDTO> imprimirContrato(
			@PathVariable Long idContratoEstudanteEmpresa,
			@RequestParam(required = false, defaultValue = "true") Boolean download,
			@RequestParam(required = false, defaultValue = "false") Boolean quebraClausula)
			throws ParseException, CieeNotFoundException, ContratoEstudanteEmpresaNotFoundException,
			GrupoComponentesException, TemplateNotFoundException {
		Long idDocumento = contratoEstudanteEmpresaService.buscarIdDocumentoContrato(idContratoEstudanteEmpresa, quebraClausula);
		ContratoEstudanteEmpresa contratoEstudanteEmpresa = contratoEstudanteEmpresaService
				.buscarContrato(idContratoEstudanteEmpresa);

		return ResponseEntity.ok().body(DocumentoContratoEstudanteEmpresaDTO.builder().idDocumento(idDocumento)
				.propriedades(ContratoEstudanteEmpresaParametrosDTO.builder()
						.assinadoEletronicamente(contratoEstudanteEmpresaService
								.contratoFoiEmitidoParaAssinaturaEletronica(contratoEstudanteEmpresa))
						.pendente(contratoEstudanteEmpresaService.contratoEstaPendente(contratoEstudanteEmpresa))
						.build())
				.build());
	}

	@Override
	public ResponseEntity<Void> enviarEmailContratacaoDiretaEstagio(
			@PathVariable(value = "idEstudante") Long idEstudante,
			@PathVariable("idLocalContrato") Long idLocalContrato) throws JsonProcessingException {
		RepLocalContrato localContrato = contratoEstudanteEmpresaService.buscarLocalContrato(idLocalContrato);
		Empresa empresa = contratoEstudanteEmpresaService.buscarEmpresa(localContrato.getContrato().getId());
		TipoServico tipoServico = localContrato.getContrato().getTipoServico();
		CieeParametersModel cieeParam = paramCieeService.buscarParametros(localContrato.getContrato().getId());
		log.info("Buscou CieeParametersModel", cieeParam.getWhatsapp());
		Estudante estudante = contratoEstudanteEmpresaService.buscarEstudante(idEstudante);
		ContratacaoDiretaEntidadesEmailsDTO dto = ContratacaoDiretaEntidadesEmailsDTO.builder().estudante(estudante)
				.localContrato(localContrato).tipoServico(tipoServico)
				.nomeOuRazaoSocial(Optional.ofNullable(empresa).map(Empresa::getNomeOuRazaoSocial).orElse(null))
				.cieeParam(cieeParam).build();
		enviarEmailContratacaoDiretaService.enviarEmailContratacaoDireta(dto);
		return ResponseEntity.noContent().build();
	}

	@Override
	public void alterarEmailResponsavel(@PathVariable Long idContrato,
			@Valid @RequestBody EmailContratoDTO emailResponsavel) throws BaseException {
		this.contratoEstudanteEmpresaService.alterarEmailResponsavel(idContrato, emailResponsavel);
	}

	@Override
	public void alterarEmailSupervisor(@PathVariable("idContrato") Long idContrato,
			@Valid @RequestBody EmailContratoDTO emailResponsavel) throws BaseException {
		this.contratoEstudanteEmpresaService.alterarEmailSupervisor(idContrato, emailResponsavel);
	}

	@Override
	@ApiOperation(value = "Buscar detalhe do contrato rescindido")
	public ResponseEntity<DetalheContratoRescindidoResponse> buscarDetalheContratoRescindido(
			@PathVariable Long idContrEstEmp) throws ContratoNotFoundException {
		return ResponseEntity.ok(contratoEstudanteEmpresaMapper
				.mapDetalheContratoRescindidoResponse(contratoEstudanteEmpresaService.buscarPorId(idContrEstEmp)));
	}

	@Override
	@ApiOperation(value = "Validar contrata√ß√£o aprendiz")
	public ResponseEntity<Void> validarContratacaoAprendiz(@PathVariable("codigoEstudante") String codigoEstudante,
			@PathVariable("codigoVaga") Long codigoVaga) throws BaseException {
		this.contratoEstudanteEmpresaService.validarContratacaoAprendiz(codigoEstudante, codigoVaga);
		return ResponseEntity.ok().build();
	}

	@Override
	public ResponseEntity<ContratoEstudanteValorBolsaDTO> obterContratoEstudanteEmpresaPorEstudante(
			@PathVariable("idEstudante") Long idEstudante) throws ContratoNotFoundException {
		List<ContratoEstudanteEmpresa> lista = this.contratoEstudanteEmpresaService
				.buscarContratosPorIdEstudante(idEstudante);
		Double valorBolsa = somaValorBolsa(lista);
		return ResponseEntity.ok(new ContratoEstudanteValorBolsaDTO(valorBolsa));
	}

	private Double somaValorBolsa(List<ContratoEstudanteEmpresa> lista) {
		Double valorBolsa = lista.stream().mapToDouble(c -> getValor(c)).sum();
		return valorBolsa;
	}

	private Double getValor(ContratoEstudanteEmpresa contratoEstudanteEmpresa) {
		DadosVagaContratacao dadosVaga = Optional.ofNullable(contratoEstudanteEmpresa.getDadosVaga())
				.orElse(new DadosVagaContratacao());
		BigDecimal valor = Optional.ofNullable(dadosVaga.getValorBolsa()).orElse(BigDecimal.ZERO);
		return valor.doubleValue();
	}

	@Override
	public ResponseEntity<Void> atualizarSituacaoParaEfetivado(@PathVariable Long idContratoEstudanteEmpresa) {
		contratoEstudanteEmpresaService.atualizarSituacaoParaEfetivado(idContratoEstudanteEmpresa);
		return ResponseEntity.noContent().build();
	}

	@Override
	public ResponseEntity<DetalhesContratoEstudanteEmpresaDTO> buscarContratoEstudEmpVagaPorId(
			@PathVariable("idContratoEstudanteEmpresa") Long idContratoEstudanteEmpresa) throws BaseException {
		return ResponseEntity.ok(contratoEstudanteEmpresaMapper.mapDetalheContratoEstudanteEmpresa(
				contratoEstudanteEmpresaService.buscarContratoEstudEmpVagaPorId(idContratoEstudanteEmpresa)));
	}

	@Override
	public ResponseEntity<ContratoEstudanteEmpresaESocialDTO> buscarDadosComplementaresESocial(
			@PathVariable("idContratoEstudanteEmpresa") Long idContratoEstudanteEmpresa)
			throws ContratoNotFoundException {
		ContratoEstudanteEmpresa contratoEstudanteEmpresa = contratoEstudanteEmpresaService
				.buscarContrato(idContratoEstudanteEmpresa);
		RepInstituicoeEnsino instituicaoEnsino = null;

		if (contratoEstudanteEmpresa.getTipoContrato().equals(TipoContrato.ESTAGIO)) {
			Long idIe = Optional.ofNullable(contratoEstudanteEmpresa.getDadosEstudante().getDadosCampus()).map(DadosCampus::getIdIe).orElse(null);
			if(Objects.isNull(idIe)) {
				idIe = Optional.ofNullable(contratoEstudanteEmpresa.getEstudante().buscarEscolaridadePrincipal()).map(EscolaridadeEstudante::getIdEscola).orElse(null);
			}
			if(Objects.nonNull(idIe)) {
			    instituicaoEnsino = ieRepository.findById(idIe).orElse(null);
			}
		} else {
			EscolaridadeEstudante buscarEscolaridadePrincipal = contratoEstudanteEmpresa.getEstudante()
					.buscarEscolaridadePrincipal();
			if (Objects.nonNull(buscarEscolaridadePrincipal.getIdEscola())) {
				instituicaoEnsino = ieRepository.findById(buscarEscolaridadePrincipal.getIdEscola()).orElse(null);
			}
			CursoCapacitacao cursoCapacitacao = cursoCapacitacaoRepository
					.findById(contratoEstudanteEmpresa.getContratoCursoCapacitacao().getIdCursoCapacitacao())
					.orElse(null);
			contratoEstudanteEmpresa.setCursoCapacitacao(cursoCapacitacao);
		}
		String cep = Optional.ofNullable(instituicaoEnsino).map(escola -> escola.getEndereco())
				.map(RepEnderecoEscola::getCep).orElse(null);

		String codigoIbgeEscola = Optional.ofNullable(cep).map(c -> {
			if (!c.isEmpty())
				return mapCarteiraTerritorioRepository.findByCep(c).map(m -> m.getCodigoMunicipio().toString())
						.orElse(Strings.EMPTY);
			return Strings.EMPTY;
		}).orElse(Strings.EMPTY);
				
		String nomeMunicipioEstudante = Optional.ofNullable(contratoEstudanteEmpresa.getDadosEstudante().getCidade()).orElse(null);
		Municipio municipioEstudante = null;
		Long codigoIbgeMunicipioEstudante = null;
		
		EstadosUf estadoUfEst = estadosUfRepository.findBySiglaEstado(contratoEstudanteEmpresa.getDadosEstudante().getEstado()).orElse(null);
		
		if(Objects.nonNull(nomeMunicipioEstudante)) {
			municipioEstudante = municipioRepository.findByNomeAndIdEstado(nomeMunicipioEstudante.toUpperCase(), estadoUfEst.getId()).orElse(null);
			codigoIbgeMunicipioEstudante = Optional.ofNullable(municipioEstudante).map(Municipio::getId).orElse(null);
		}
		
		String municipioNaturalidadeEstudante;
		Long codigoIbgeNaturalidadeEstudante;
		if (Objects.nonNull(contratoEstudanteEmpresa.getEstudante().getCodigoIbeNaturaliadade())) {
			if (!contratoEstudanteEmpresa.getEstudante().getBrasileiro()) {
				municipioNaturalidadeEstudante = contratoEstudanteEmpresa.getEstudante().getCodigoIbeNaturaliadade();
				codigoIbgeNaturalidadeEstudante = null;
			} else {
				codigoIbgeNaturalidadeEstudante = Long
						.parseLong(contratoEstudanteEmpresa.getEstudante().getCodigoIbeNaturaliadade());
				municipioNaturalidadeEstudante = municipioRepository.findById(codigoIbgeNaturalidadeEstudante)
						.map(Municipio::getNome).orElse(null);
			}
		} else {
			municipioNaturalidadeEstudante = null;
			codigoIbgeNaturalidadeEstudante = null;
		}
		
		Long codigoSuperintendencia = Optional.ofNullable(contratoEstudanteEmpresa.getLocalContrato().buscarEnderecoPrincipal()).map(RepLocalEndereco::getUnidadeCieeLocal).map(UnidadeCiee::getGerencia).map(RepGerencia::getCodigoSuperintendencia).orElse(null);

		Superintendencias superint = null;
		if(Objects.nonNull(codigoSuperintendencia)) {
			superint = superintendenciaRepository.findById(contratoEstudanteEmpresa.getLocalContrato()
				.buscarEnderecoPrincipal().getUnidadeCieeLocal().getGerencia().getCodigoSuperintendencia())
				.orElse(null);
		}
		
		List<Dependente> dependentes = dependenteRepository.findByIdEstudanteAndDeletedFalse(contratoEstudanteEmpresa.getEstudante().getId());
		
		List<DependenteEstudanteEsocialDTO> dependentesEstudanteDTO = null;
		if(Objects.nonNull(dependentes)) {
			dependentesEstudanteDTO = dependentes.stream().map(dependente -> dependenteEstudanteToDependenteDTO(dependente)).collect(Collectors.toList());
		}
		
		Long estagioAutonomo = 0l;
		if(Objects.nonNull(contratoEstudanteEmpresa.getDadosVagaContrato().getEstagioAutonomo())) {
			estagioAutonomo = contratoEstudanteEmpresa.getDadosVagaContrato().getEstagioAutonomo() ? 1l : 0l;
		}
		
		
		UnidadeCiee unidadeCiee = unidadeCieeRepository.buscarUnidadeCieePorIdContratoIdLocalEEstagioAutonomo(contratoEstudanteEmpresa.getLocalContrato().getIdContrato(), contratoEstudanteEmpresa.getLocalContrato().getId(), estagioAutonomo);
		Municipio municipioUnidadeCiee = null;
		if(Objects.nonNull(unidadeCiee)) {
			String nomeMunicipio = unidadeCiee.getEndereco().getCidade().toUpperCase();
			EstadosUf estadoUf = estadosUfRepository.findBySiglaEstado( unidadeCiee.getEndereco().getEstado().toUpperCase()).orElse(null);
			municipioUnidadeCiee = municipioRepository.findByNomeAndIdEstado(nomeMunicipio, estadoUf.getId()).orElse(null);
		}
		RepAreasAtuacaoEstagio areaAtuacaoEstagio = null;
		if(contratoEstudanteEmpresa.getTipoContrato().equals(TipoContrato.ESTAGIO)) {
			areaAtuacaoEstagio = contratoEstudanteEmpresa.getDadosVagaContrato().getAreasAtuacao().stream().findFirst().orElse(null);
			if(Objects.isNull(areaAtuacaoEstagio)){
				areaAtuacaoEstagio = repAreasAtuacaoCursosRepository.findByRepCursoId(contratoEstudanteEmpresa.getDadosEstudante().getDadosCurso().getCodigoCurso()).stream().findFirst().map(RepAreasAtuacaoCursos::getRepAreasAtuacaoEstagio).orElse(null);					
			}
		}
				
		return ResponseEntity.ok(contratoEstudanteEmpresaMapper.mapDadosComplementaresESocial(DadosESocialDTO.builder()
				.contratoEstudanteEmpresa(contratoEstudanteEmpresa).instituicaoEnsino(instituicaoEnsino)
				.codigoIbgeEscola(codigoIbgeEscola)
				.codigoIbgeNaturalidadeEstudante(codigoIbgeNaturalidadeEstudante)
				.codigoEstadoUfEst(estadoUfEst.getId())
				.dependente(dependentesEstudanteDTO)
				.unidadeCiee(unidadeCieeToUnidadeCieeEsocialDTO(unidadeCiee, municipioUnidadeCiee))
				.codigoMunicipioEstudante(codigoIbgeMunicipioEstudante)
				.municipioNaturalidadeEstudante(municipioNaturalidadeEstudante)
				.areaAtuacaoEstagio(areaAtuacaoEstagio)
				.enderecoLocalContrato(enderecoLocalContratoToEnderecoLocalContratoEsocialDTO(contratoEstudanteEmpresa.getLocalContrato().buscarEnderecoPrincipal().getEndereco()))
				.superintendencia(superint).build()));
	}
	
	private DependenteEstudanteEsocialDTO dependenteEstudanteToDependenteDTO(Dependente dependente){
		return DependenteEstudanteEsocialDTO.builder()
				.id(dependente.getId())
				.codigoTipoDependente(dependente.getTipoDependente().getCodigo())
				.descricaoTipoDependente(dependente.getTipoDependente().getDescricao())
				.dependCapFisMenTrab(dependente.getPodeTrabalhar() ? "Sim" : "N√£o")
				.build();
	}
	
	private UnidadeCieeEsocialDTO unidadeCieeToUnidadeCieeEsocialDTO(UnidadeCiee unidadeCiee, Municipio municipioUnidadeCiee){
		return UnidadeCieeEsocialDTO.builder()
		.codigoUnidadeCiee(Optional.ofNullable(unidadeCiee).map(UnidadeCiee::getId).orElse(null))
		.nomeUnidadeCiee(Optional.ofNullable(unidadeCiee).map(UnidadeCiee::getDescricao).orElse(null))
		.endereco(Optional.ofNullable(unidadeCiee).map(UnidadeCiee::getEndereco).map(RepEnderecoEscola::getEndereco).orElse(null))
		.numero(Optional.ofNullable(unidadeCiee).map(UnidadeCiee::getEndereco).map(RepEnderecoEscola::getNumero).orElse(null))
		.complemento(Optional.ofNullable(unidadeCiee).map(UnidadeCiee::getEndereco).map(RepEnderecoEscola::getComplemento).orElse(null))
		.bairro(Optional.ofNullable(unidadeCiee).map(UnidadeCiee::getEndereco).map(RepEnderecoEscola::getBairro).orElse(null))
		.cep(Optional.ofNullable(unidadeCiee).map(UnidadeCiee::getEndereco).map(RepEnderecoEscola::getCep).orElse(null))
		.cidade(Optional.ofNullable(unidadeCiee).map(UnidadeCiee::getEndereco).map(RepEnderecoEscola::getCidade).orElse(null))
		.codigoIbe(Optional.ofNullable(municipioUnidadeCiee).map(Municipio::getId).orElse(null))
		.uf(Optional.ofNullable(unidadeCiee).map(UnidadeCiee::getEndereco).map(RepEnderecoEscola::getEstado).orElse(null))
		.build();
	}
	
	private EnderecoLocalContratoEsocialDTO enderecoLocalContratoToEnderecoLocalContratoEsocialDTO(RepEnderecos endereco){
		return EnderecoLocalContratoEsocialDTO.builder()
		.id(Optional.ofNullable(endereco).map(RepEnderecos::getId).orElse(null))		
		.endereco(Optional.ofNullable(endereco).map(RepEnderecos::getEndereco).orElse(null))
		.numero(Optional.ofNullable(endereco).map(RepEnderecos::getNumero).orElse(null))
		.complemento(Optional.ofNullable(endereco).map(RepEnderecos::getComplemento).orElse(null))
		.bairro(Optional.ofNullable(endereco).map(RepEnderecos::getBairro).orElse(null))
		.cep(Optional.ofNullable(endereco).map(RepEnderecos::getCep).orElse(null))
		.cidade(Optional.ofNullable(endereco).map(RepEnderecos::getCidade).orElse(null))		
		.uf(Optional.ofNullable(endereco).map(RepEnderecos::getUf).orElse(null))
		.build();
	}

	@Override
	public ResponseEntity<DetalhesTCEResponse> buscarDetalhesTCE(
			@PathVariable("idContratoEstudanteEmpresa") Long idContratoEstudanteEmpresa)
			throws ContratoNotFoundException, InfoContratoEmpresaNotFoundException, BaseException {
		return ResponseEntity.ok(contratoEstudanteEmpresaMapper.mapearDetalhesTCE(contratoEstudanteEmpresaService
				.buscarInformacoesAdicionaisContratoEmpresa(idContratoEstudanteEmpresa)));
	}

	@Override
	public ResponseEntity<DetalhesContratoEstudanteDTO> detalharContratoEstudanteEmpresa(
			@PathVariable Long idContratoEstudanteEmpresa) throws ContratoNotFoundException {
		return ResponseEntity.ok(this.detalhesContratoEstudanteMapper.convertTransferObject(
				this.contratoEstudanteEmpresaService.buscarContratoEstudEmpPorId(idContratoEstudanteEmpresa)));

	}
}
