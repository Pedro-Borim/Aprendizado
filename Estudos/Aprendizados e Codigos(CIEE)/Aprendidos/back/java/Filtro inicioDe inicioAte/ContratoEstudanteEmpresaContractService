package br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa;


import br.org.ciee.kairos.architecture.core.exception.BaseException;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.cancelamentorescisao.model.DetalheContratoRescindidoResponse;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.model.DetalhesContratoEstudanteDTO;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.model.DetalhesTCEResponse;
import br.org.ciee.kairos.vagas.api.client.contratoestudanteempresa.model.DocumentoContratoEstudanteEmpresaDTO;
import br.org.ciee.kairos.vagas.common.exception.ContratoNotFoundException;
import br.org.ciee.kairos.vagas.common.model.contratoestudanteempresa.ContratoEstudanteEmpresaFilter;
import br.org.ciee.kairos.vagas.common.model.contratoestudanteempresa.EmailContratoDTO;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.text.ParseException;
import java.util.List;

public interface ContratoEstudanteEmpresaContractService {

    @GetMapping("/contratos/estudantes/{idEstudante}")
    @PreAuthorize("hasAnyAuthority('contr_est', 'contr_bo', 'backend_com')")
    ResponseEntity<List<ContratoEstudanteEmpresaDTO>> buscarContratoPorEstudante(@RequestHeader("Authorization") String token,
                                                                                 @PathVariable("idEstudante") Long idEstudante, @RequestParam(defaultValue = "false") Boolean ativo) throws ParseException;

    @GetMapping("/contratos/local-contrato/{codigoLocalContrato}")
    @PreAuthorize("hasAnyAuthority('contr_bo','crud_cont_emp')")
    ResponseEntity<Page<ContratoEstudanteEmpresaDTO>> buscar(@RequestHeader("Authorization") String token,
                                                             @PathVariable("codigoLocalContrato") Long codigoLocalContrato,
                                                             ContratoEstudanteEmpresaFilter filtro,
                                                             Pageable pageable) throws ParseException;

    @PreAuthorize("hasAnyAuthority('dtl_contrato')")
    @GetMapping("{codigoVaga}/contratos/estudantes/{codigoEstudante}")
    ResponseEntity<DetalhesContratoEstudanteDTO> detalharContratoEstudante(
            @PathVariable("codigoEstudante") Long codigoEstudante,
            @PathVariable("codigoVaga") Long codigoVaga) throws ContratoNotFoundException;
    
    @PreAuthorize("hasAnyAuthority('dtl_contrato')")
    @GetMapping("{codigoVaga}/contratos/dados/estudantes/{codigoEstudante}")
    ResponseEntity<DetalhesContratoEstudanteDTO> detalharDadosContratoEstudante(
            @PathVariable("codigoEstudante") Long codigoEstudante,
            @PathVariable("codigoVaga") Long codigoVaga,
            @RequestParam(value = "idContratoEstudanteEmpresa", required = false) Long idContratoEstudateEmpresa) throws ContratoNotFoundException;

    @GetMapping("/contratos-estudante-empresa/{idContratoEstudanteEmpresa}")
    ResponseEntity<ContratoEstudanteEmpresaDTO> obterContratoEstudanteEmpresa(
            @PathVariable("idContratoEstudanteEmpresa") Long idContratoEstudanteEmpresa) throws ContratoNotFoundException;

    @GetMapping("/contratos-estudante-empresa/estudantes/{idEstudante}/valor-bolsa-auxilio")
    ResponseEntity<ContratoEstudanteValorBolsaDTO> obterContratoEstudanteEmpresaPorEstudante(
            @PathVariable("idEstudante") Long idEstudante) throws ContratoNotFoundException;

    @PreAuthorize("hasAnyAuthority('contr_bo')")
    @GetMapping("/contratos/{idContratoEstudanteEmpresa}/impressao")
    ResponseEntity<DocumentoContratoEstudanteEmpresaDTO> imprimirContrato(@PathVariable("idContratoEstudanteEmpresa") Long idContratoEstudanteEmpresa,
                                                                          @RequestParam(value = "download", required = false, defaultValue = "true") Boolean download,
                                                                          @RequestParam(value = "quebraClausula", required = false, defaultValue = "false") Boolean quebraClausula) throws Exception;

//    @PreAuthorize("hasAnyAuthority('contr_bo')")
    @PostMapping("/contratos/estudantes/{idEstudante}/locais-contrato/{idLocalContrato}/email-documentos")
    ResponseEntity<Void> enviarEmailContratacaoDiretaEstagio(@PathVariable(value = "idEstudante") Long idEstudante, @PathVariable(value = "idLocalContrato") Long idLocalContrato) throws JsonProcessingException;

    @PreAuthorize("hasAnyAuthority('contr_bo')")
    @PatchMapping("/contratos/{idContrato}/responsavel/email")
    void alterarEmailResponsavel(
            @PathVariable("idContrato") Long idContrato,
            @Valid @RequestBody EmailContratoDTO emailResponsavel) throws BaseException;

    @PreAuthorize("hasAnyAuthority('contr_bo')")
    @PutMapping("/contratos/{idContrato}/supervisor/email")
    void alterarEmailSupervisor(
            @PathVariable("idContrato") Long idContrato,
            @Valid @RequestBody EmailContratoDTO emailResponsavel) throws BaseException;

    @GetMapping("/contratos-estudante-empresa/{idContrEstEmp}/detalhe-rescindido")
    ResponseEntity<DetalheContratoRescindidoResponse> buscarDetalheContratoRescindido(@PathVariable("idContrEstEmp") Long idContrEstEmp) throws Exception;

    @PreAuthorize("hasAnyAuthority('contr_bo')")
    @PostMapping("/contratos/estudantes/{codigoEstudante}/vaga/{codigoVaga}/validar")
    ResponseEntity<Void> validarContratacaoAprendiz(@PathVariable("codigoEstudante") String codigoEstudante, @PathVariable("codigoVaga") Long codigoVaga) throws BaseException;

    @PatchMapping("/contratos-estudante-empresa/{idContratoEstudanteEmpresa}/situacao-efetivado")
    ResponseEntity<Void> atualizarSituacaoParaEfetivado(@PathVariable("idContratoEstudanteEmpresa") Long idContratoEstudanteEmpresa);

    @GetMapping("/contratos-estudante-empresa/{idContratoEstudanteEmpresa}/tce-detalhes")
    @PreAuthorize("hasAnyAuthority('ger_irr_simpre')")
    ResponseEntity<DetalhesContratoEstudanteEmpresaDTO> buscarContratoEstudEmpVagaPorId(@PathVariable("idContratoEstudanteEmpresa") Long idContratoEstudanteEmpresa) throws BaseException;
    
    @GetMapping("/contratos-estudante-empresa/{idContratoEstudanteEmpresa}/esocial-complementar")
    ResponseEntity<ContratoEstudanteEmpresaESocialDTO> buscarDadosComplementaresESocial(@PathVariable("idContratoEstudanteEmpresa") Long idContratoEstudanteEmpresa) throws ContratoNotFoundException;

    @GetMapping("/contratos-estudante-empresa/{idContratoEstudanteEmpresa}/detalhes")
    ResponseEntity<DetalhesTCEResponse> buscarDetalhesTCE(@PathVariable("idContratoEstudanteEmpresa") Long idContratoEstudanteEmpresa) throws ContratoNotFoundException, BaseException;
    
    @PreAuthorize("hasAnyAuthority('dtl_contrato')")
    @GetMapping("contratos/contratos-estudante-empresa/{idContratoEstudanteEmpresa}")
    ResponseEntity<DetalhesContratoEstudanteDTO> detalharContratoEstudanteEmpresa(@PathVariable("idContratoEstudanteEmpresa") Long idContratoEstudanteEmpresa) throws ContratoNotFoundException;

}
