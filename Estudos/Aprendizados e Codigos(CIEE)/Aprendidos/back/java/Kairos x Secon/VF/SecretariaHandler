package br.com.adtsys.ciee.student.secretaria.client;

import static org.springframework.http.HttpStatus.Series.CLIENT_ERROR;
import static org.springframework.http.HttpStatus.Series.SERVER_ERROR;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.client.DefaultResponseErrorHandler;

import com.fasterxml.jackson.databind.ObjectMapper;

import br.com.adtsys.ciee.student.secretaria.exception.SecretariaException;
import br.com.adtsys.ciee.student.secretaria.model.ErroSecretariaDTO;
import br.com.adtsys.ciee.student.secretaria.model.RespostaSecretariaDTO;
import lombok.extern.log4j.Log4j2;

@Log4j2
@Component("ClientSecretariaSDKErrorHandler")
public class ClientSecretariaSDKErrorHandler extends DefaultResponseErrorHandler{

	private static final String CHAVE_ERRO = "EXCEPTION_SECRETARIA_INDISPONIVEL";

    @Override
    public boolean hasError(ClientHttpResponse response) throws IOException {
        return (CLIENT_ERROR.equals(response.getStatusCode().series())
                || SERVER_ERROR.equals(response.getStatusCode().series()));
    }

    @Override
    public void handleError(ClientHttpResponse response) throws IOException {
        HttpStatus statusCode = response.getStatusCode();

        if (HttpStatus.Series.SERVER_ERROR.equals(statusCode.series())
                || HttpStatus.Series.CLIENT_ERROR.equals(statusCode.series())) {
            String responseBody = new BufferedReader(new InputStreamReader(response.getBody(), StandardCharsets.UTF_8)).lines().collect(Collectors.joining());

           this.log.error(
                    "Resposta secretaria - status:{} payload: {}",
                    statusCode.value(),
                    responseBody);

            throw new SecretariaException(statusCode, getMensagemErro(obterRepostaSecretaria(responseBody)));
        }
    }

    private RespostaSecretariaDTO obterRepostaSecretaria(String responseBody) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            return objectMapper.readValue(responseBody, RespostaSecretariaDTO.class);
        } catch (IOException e) {
            return null;
        }
    }

    private String getMensagemErro(RespostaSecretariaDTO respostaSecretariaDTO) {
        if(Objects.isNull(respostaSecretariaDTO)){
            return CHAVE_ERRO;
        }
        ErroSecretariaDTO errors = respostaSecretariaDTO.getErrors();
        if(Objects.nonNull(errors) && Objects.isNull(errors.getMessage())){
            return Objects.nonNull(errors.getDescription()) ? errors.getDescription() : CHAVE_ERRO;
        }
        return extrairMensagensErro(errors.getMessage());
    }
    
    private String extrairMensagensErro(Map<Object, Object> errors) {
        return errors.entrySet().stream().map(objectObjectEntry -> mensagem(objectObjectEntry.getValue()))
                .filter(StringUtils::isNotEmpty)
                .collect(Collectors.joining("; "));
    }

    private String mensagem(Object map) {
        try {
            return (String) map;
        } catch (ClassCastException e) {
            return extrairMensagensErro((Map<Object, Object>) map);
        }
    }
	
}
