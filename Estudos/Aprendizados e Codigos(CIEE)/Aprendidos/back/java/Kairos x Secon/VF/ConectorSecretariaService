package br.com.adtsys.ciee.student.secretaria.service;

import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.Optional;

import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import br.com.adtsys.ciee.student.email.model.EstudanteRequest;
import br.com.adtsys.ciee.student.secretaria.client.ConectorSecretaria;
import br.com.adtsys.ciee.student.secretaria.client.SecretariaSDK;
import br.com.adtsys.ciee.student.secretaria.model.BuscaEstudanteRequest;
import br.com.adtsys.ciee.student.secretaria.model.EstudanteResponse;
import lombok.SneakyThrows;

@Service
public class ConectorSecretariaService implements ConectorSecretaria {

    private SecretariaSDK cliente;
	private ObjectMapper mapper;
	
	public ConectorSecretariaService(ObjectMapper mapper, SecretariaSDK cliente) {
        this.mapper = mapper;
        this.cliente = cliente;
    }
	
    @Override
    public Long obterDadosEstudante(BuscaEstudanteRequest filtro) {

        MultiValueMap<String, String> params = converteQueryParams(filtro);

        ResponseEntity<EstudanteResponse[]> resposta = cliente.requestClass(
                "/v1/apprentices",
                params,
                HttpMethod.GET, EstudanteResponse[].class);

        return Optional.ofNullable(resposta)
                .map(ResponseEntity::getBody)
                .map(Arrays::asList)
                .map(Collection::stream)
                .map(estudantesStream -> estudantesStream.findFirst())
                .map(Optional::get)
                .map(EstudanteResponse::getId)
                .orElse(null);
    }
    

    @Override
    @SneakyThrows
    public void atualizarDadosEstudante(EstudanteRequest dados) {

        String body = mapper.writeValueAsString(dados);

        ResponseEntity<EstudanteResponse> resposta = cliente.requestClass(
                "/v1/apprentices",
                null,
                body, HttpMethod.PUT, EstudanteResponse.class);
        		
    }

    private MultiValueMap<String, String> converteQueryParams(Object obj) {
    	ObjectMapper objectMapper = new ObjectMapper();
    	MultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>();
    	Map<String, String> maps = objectMapper.convertValue(obj, new TypeReference<Map<String, String>>() {
    	});
    	parameters.setAll(maps);
    	parameters.values().removeIf(p->(p.isEmpty() || p.get(0) == null));
    	return parameters;
    }
    
}
