package br.org.ciee.kairos.vagas.api.service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Stream;

import javax.validation.constraints.NotNull;

import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.client.HttpClientErrorException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.Sets;

import br.org.ciee.kairos.vagas.api.client.secretaria.SecretariaSDK;
import br.org.ciee.kairos.vagas.api.exception.SecretariaMatriculaNaoGeradaException;
import br.org.ciee.kairos.vagas.business.conectores.ConectorSecretariaSDK;
import br.org.ciee.kairos.vagas.business.exception.CancelamentoRescisaoSecretariaException;
import br.org.ciee.kairos.vagas.business.exception.secretaria.SecretariaException;
import br.org.ciee.kairos.vagas.business.secretaria.composicao.dto.ComposicaoSecretaria;
import br.org.ciee.kairos.vagas.business.secretaria.polo.dto.PoloDTO;
import br.org.ciee.kairos.vagas.business.secretaria.programa.dto.ProgramaSecretaria;
import br.org.ciee.kairos.vagas.business.secretaria.sala.dto.SalaDTO;
import br.org.ciee.kairos.vagas.common.model.diariodebordo.DiarioDeBordoResponse;
import br.org.ciee.kairos.vagas.common.model.secretaria.BuscaEstudanteRequest;
import br.org.ciee.kairos.vagas.common.model.secretaria.CalendarioSecretaria;
import br.org.ciee.kairos.vagas.common.model.secretaria.CalendarioSecretariaFiltro;
import br.org.ciee.kairos.vagas.common.model.secretaria.CalendarioSecretariaResponse;
import br.org.ciee.kairos.vagas.common.model.secretaria.CancelarRescindirRequest;
import br.org.ciee.kairos.vagas.common.model.secretaria.ContratoAprendizFiltro;
import br.org.ciee.kairos.vagas.common.model.secretaria.CursoMteRequest;
import br.org.ciee.kairos.vagas.common.model.secretaria.CursoMteResponse;
import br.org.ciee.kairos.vagas.common.model.secretaria.DadosTcaAprendizFiltro;
import br.org.ciee.kairos.vagas.common.model.secretaria.DadosTurmaAprendiz;
import br.org.ciee.kairos.vagas.common.model.secretaria.DatasInicioCursoCapacitacaoRequest;
import br.org.ciee.kairos.vagas.common.model.secretaria.DatasInicioCursoCapacitacaoResponse;
import br.org.ciee.kairos.vagas.common.model.secretaria.DiarioDeBordoSecretariaFiltro;
import br.org.ciee.kairos.vagas.common.model.secretaria.EmpresaContratoLocalRequest;
import br.org.ciee.kairos.vagas.common.model.secretaria.EmpresaContratoLocalResponse;
import br.org.ciee.kairos.vagas.common.model.secretaria.EstudanteRequest;
import br.org.ciee.kairos.vagas.common.model.secretaria.EstudanteResponse;
import br.org.ciee.kairos.vagas.common.model.secretaria.InstrutorFiltro;
import br.org.ciee.kairos.vagas.common.model.secretaria.InstrutorTurma;
import br.org.ciee.kairos.vagas.common.model.secretaria.PercentualAprendizResponse;
import br.org.ciee.kairos.vagas.common.model.secretaria.ReservaTurmaSecretaria;
import br.org.ciee.kairos.vagas.common.model.secretaria.SecDadosMatriculaResponse;
import br.org.ciee.kairos.vagas.common.model.secretaria.SecReservaAprendiz;
import br.org.ciee.kairos.vagas.common.model.secretaria.SecReservaTurmaResponse;
import br.org.ciee.kairos.vagas.common.model.secretaria.TurmaCBOSecretaria;
import br.org.ciee.kairos.vagas.common.model.secretaria.TurmaCBOSecretariaResponse;
import br.org.ciee.kairos.vagas.common.model.secretaria.TurmaSecretaria;
import br.org.ciee.kairos.vagas.common.model.secretaria.TurmaSecretariaFiltro;
import br.org.ciee.kairos.vagas.common.model.secretaria.TurmaSecretariaResponse;
import br.org.ciee.kairos.vagas.common.model.secretaria.TurmaVagaSecretariaFiltro;
import br.org.ciee.kairos.vagas.common.model.secretariasdk.SecSdkResposta;
import lombok.SneakyThrows;
import lombok.extern.log4j.Log4j2;

@Validated
@Log4j2
@Component
public class ConectorSecretariaSDKService implements ConectorSecretariaSDK {

    private static final String ALLOCATION_ENDPOINT = "/v1/allocation";
    private static final String ALLOCATION_ID_ENDPOINT = ALLOCATION_ENDPOINT + "/{id}";

    private ObjectMapper mapper;
    private SecretariaSDK cliente;

    public ConectorSecretariaSDKService(ObjectMapper mapper, SecretariaSDK cliente) {
        this.mapper = mapper;
        this.cliente = cliente;
    }

    @Override
    public SecSdkResposta<Long> enviarInsercaoSala(SalaDTO sala) {
        return enviarDadosInsercao("/v1/classrooms", sala);
    }

    @Override
    public SecSdkResposta<Long> enviarAlteracaoSala(SalaDTO sala) {
        return enviarDadosAlteracao("/v1/classrooms", sala);
    }

    @Override
    public SecSdkResposta<Long> enviarInsercaoPrograma(ProgramaSecretaria programaSecretaria) {
        return enviarDadosInsercao("/v1/programs", programaSecretaria);
    }

    @Override
    public SecSdkResposta<Long> enviarAlteracaoPrograma(ProgramaSecretaria programaSecretaria) {
        return enviarDadosAlteracao("/v1/programs", programaSecretaria);
    }

    @Override
    public SecSdkResposta<Long> enviarInsercaoPolo(PoloDTO polo) {
        return enviarDadosInsercao("/v1/locales", polo);
    }

    @Override
    public SecSdkResposta<Long> enviarAlteracaoPolo(PoloDTO polo) {
        return enviarDadosAlteracao("/v1/locales", polo);
    }

    @Override
    public void enviarInsercaoComposicao(List<ComposicaoSecretaria> composicoesSecretaria) {
        List<Object> body = mapper.convertValue(
                composicoesSecretaria,
                new TypeReference<List<Object>>() {
                });

        cliente.request("/v1/compositions", HttpMethod.POST, body);
    }

    @Override
    public void enviarAlteracaoComposicao(List<ComposicaoSecretaria> composicoesSecretaria) {
        List<Object> body = mapper.convertValue(
                composicoesSecretaria,
                new TypeReference<List<Object>>() {
                });

        cliente.request("/v1/compositions", HttpMethod.PUT, body);
    }

    @Override
    public Set<LocalDate> obterDatasInicioCursoCapacitacao(DatasInicioCursoCapacitacaoRequest request) {
        MultiValueMap<String, String> params = converteQueryParams(request);
        ResponseEntity<DatasInicioCursoCapacitacaoResponse> resposta = cliente.requestClass(
                "/v1/startDates", params, HttpMethod.GET, DatasInicioCursoCapacitacaoResponse.class);

        return Optional.ofNullable(resposta.getBody())
                .map(DatasInicioCursoCapacitacaoResponse::getDatasInicio)
                .map(Sets::newHashSet)
                .orElseGet(HashSet::new);
    }

    @Override
    public Set<LocalDate> obterDatasInicioCursoCapacitacaoPorTurmas(DatasInicioCursoCapacitacaoRequest request) {
        MultiValueMap<String, String> params = converteQueryParams(request);
        ResponseEntity<DatasInicioCursoCapacitacaoResponse> resposta = cliente.requestClass(
                "/v1/startDatesByGroup", params, HttpMethod.GET, DatasInicioCursoCapacitacaoResponse.class);

        return Optional.ofNullable(resposta.getBody())
                .map(DatasInicioCursoCapacitacaoResponse::getDatasInicio)
                .map(Sets::newHashSet)
                .orElseGet(HashSet::new);
    }

    @Override
    @SuppressWarnings("unchecked")
    public List<TurmaSecretaria> buscarDadosTurma(TurmaSecretariaFiltro filtro) {
        MultiValueMap<String, String> params = converteQueryParams(filtro);
        ResponseEntity<TurmaSecretariaResponse> resposta = cliente.requestClass("/v1/groups", params, HttpMethod.GET, TurmaSecretariaResponse.class);

        return Optional.ofNullable(resposta.getBody())
                .map(TurmaSecretariaResponse::getData)
                .orElse(new ArrayList<>());
    }

    @Override
    public Long reservarTurma(ReservaTurmaSecretaria reserva) throws JsonProcessingException {

        String body = mapper.writeValueAsString(reserva);

        ResponseEntity<SecReservaTurmaResponse> resposta = cliente.requestClass(
                "/v1/reservations",
                null,
                body, HttpMethod.POST, SecReservaTurmaResponse.class);

        return Optional.ofNullable(resposta)
                .map(ResponseEntity::getBody)
                .map(SecReservaTurmaResponse::getId)
                .orElse(0l);
    }


    @Override
    public Long enviarDadosEmpresaContratoLocal(EmpresaContratoLocalRequest dados) throws JsonProcessingException {

        String body = mapper.writeValueAsString(dados);

        ResponseEntity<EmpresaContratoLocalResponse> resposta = cliente.requestClass(
                "/v1/agreements",
                null,
                body, HttpMethod.POST, EmpresaContratoLocalResponse.class);

        return Optional.ofNullable(resposta)
                .map(ResponseEntity::getBody)
                .map(EmpresaContratoLocalResponse::getId)
                .orElse(0l);
    }

    @Override
    public Long obterDadosEstudante(BuscaEstudanteRequest filtro) {

        MultiValueMap<String, String> params = converteQueryParams(filtro);

        ResponseEntity<EstudanteResponse[]> resposta = cliente.requestClass(
                "/v1/apprentices",
                params,
                HttpMethod.GET, EstudanteResponse[].class);

        return Optional.ofNullable(resposta)
                .map(ResponseEntity::getBody)
                .map(Arrays::asList)
                .map(Collection::stream)
                .map(estudantesStream -> estudantesStream.findFirst())
                .map(Optional::get)
                .map(EstudanteResponse::getId)
                .orElse(0l);
    }

    @Override
    public Long enviarDadosEstudante(EstudanteRequest dados) throws JsonProcessingException {

        String body = mapper.writeValueAsString(dados);

        ResponseEntity<EstudanteResponse> resposta = cliente.requestClass(
                "/v1/apprentices",
                null,
                body, HttpMethod.POST, EstudanteResponse.class);

        return Optional.ofNullable(resposta)
                .map(ResponseEntity::getBody)
                .map(EstudanteResponse::getId)
                .orElse(0l);
    }

    @Override
    public Long atualizarDadosEstudante(EstudanteRequest dados) throws JsonProcessingException {

        String body = mapper.writeValueAsString(dados);

        ResponseEntity<EstudanteResponse> resposta = cliente.requestClass(
                "/v1/apprentices",
                null,
                body, HttpMethod.PUT, EstudanteResponse.class);

        return Optional.ofNullable(resposta)
                .map(ResponseEntity::getBody)
                .map(EstudanteResponse::getId)
                .orElse(0l);
    }

    @Override
    public SecDadosMatriculaResponse enviarMatriculaAprendiz(SecReservaAprendiz aprendiz) throws JsonProcessingException {
        String body = mapper.writeValueAsString(aprendiz);

        ResponseEntity<SecDadosMatriculaResponse> resposta = cliente.requestClass(
                ALLOCATION_ENDPOINT,
                null,
                body, HttpMethod.POST, SecDadosMatriculaResponse.class);

        return Optional.ofNullable(resposta.getBody())
                .orElseThrow(SecretariaMatriculaNaoGeradaException::new);
    }

    @Override
    public boolean cancelarMatriculaAprendiz(@NotNull Long idMatriculaRh) {

        final String endpointCancelarMatriculaAprendiz = ALLOCATION_ID_ENDPOINT
                .replace("{id}", idMatriculaRh.toString());

        return cliente.requestClass(endpointCancelarMatriculaAprendiz, new LinkedMultiValueMap<>(), HttpMethod.DELETE, String.class)
                .getStatusCode()
                .is2xxSuccessful();

    }

    @Override
    public List<CalendarioSecretaria> obterCalendario(CalendarioSecretariaFiltro filtro) {
        MultiValueMap<String, String> params = converteQueryParams(filtro);
        ResponseEntity<CalendarioSecretariaResponse> resposta = null;

        resposta = cliente.requestClass(
                "/v1/contracts",
                params,
                HttpMethod.GET,
                CalendarioSecretariaResponse.class);

        return Optional.ofNullable(resposta)
                .map(ResponseEntity::getBody)
                .map(CalendarioSecretariaResponse::getData)
                .orElse(Collections.emptyList());
    }

    private SecSdkResposta<Long> tratarRespostaInsercao(ResponseEntity<Map> resposta) {
        Long id = null;

        if (resposta.getStatusCode() == HttpStatus.CREATED) {

            id = Optional.ofNullable(resposta.getBody())
                    .map(body -> Long.valueOf(body.get("id").toString()))
                    .orElse(null);
        }

        return SecSdkResposta.<Long>builder()
                .status(resposta.getStatusCode())
                .objetoResposta(id)
                .build();
    }

    private <T> ResponseEntity<Map> enviarDados(String url, HttpMethod httpMehtod, T dto) {
        Map<String, Object> body = mapper.convertValue(
                dto,
                new TypeReference<Map<String, Object>>() {
                });

        return cliente.request(url, httpMehtod, body);
    }

    private <T> SecSdkResposta<Long> enviarDadosInsercao(String url, T dto) {
        ResponseEntity<Map> resposta;
        try {
            resposta = enviarDados(url, HttpMethod.POST, dto);
        } catch (HttpClientErrorException httpError) {
            log.error(httpError.getResponseBodyAsString());
            throw httpError;
        }
        return tratarRespostaInsercao(resposta);
    }

    private <T> SecSdkResposta<Long> enviarDadosAlteracao(String url, T dto) {
        ResponseEntity<Map> resposta = enviarDados(url, HttpMethod.PUT, dto);

        return SecSdkResposta.<Long>builder()
                .status(resposta.getStatusCode())
                .build();
    }

    private MultiValueMap<String, String> converteQueryParams(Object obj) {
        ObjectMapper objectMapper = new ObjectMapper();
        MultiValueMap<String, String> parameters = new LinkedMultiValueMap<String, String>();
        Map<String, String> maps = objectMapper.convertValue(obj, new TypeReference<Map<String, String>>() {
        });
        parameters.setAll(maps);
        parameters.values().removeIf(p->(p.isEmpty() || p.get(0) == null));
        return parameters;
    }

    @Override
    public ReservaTurmaSecretaria obterReserva(Long idReserva) {
        ResponseEntity<ReservaTurmaSecretaria[]> resposta = null;

        resposta = cliente.requestClass(
                String.format("/v1/reservations/%s", idReserva),
                null,
                HttpMethod.GET,
                ReservaTurmaSecretaria[].class);

        return Optional.ofNullable(resposta)
                .map(ResponseEntity::getBody)
                .map(Arrays::asList)
                .map(Collection::stream)
                .flatMap(Stream::findFirst)
                .orElse(null);
    }

    @Override
    public boolean existeReserva(Long idReserva) {
        return cliente.request(String.format("/v1/reservations/%s", idReserva),
                HttpMethod.GET, Collections.emptyList()).getStatusCode().is2xxSuccessful();
    }

    @Override
    @SneakyThrows({HttpClientErrorException.class})
    public boolean removerReserva(Long idReserva) {
    	try {
    		ResponseEntity response = cliente.request(String.format("/v1/reservations/%s", idReserva),
                    HttpMethod.DELETE, Collections.emptyList());
            
            return response.getStatusCode().is2xxSuccessful();
    	} catch (SecretariaException httpError) {
    		return httpError.getStatusCode().equals(HttpStatus.NOT_FOUND);
    	}
        
    }

    @Override
    public Long enviarDadosCursoMTE(CursoMteRequest dadosCurso) throws JsonProcessingException {
        String body = mapper.writeValueAsString(dadosCurso);

        ResponseEntity<CursoMteResponse> resposta = cliente.requestClass(
                "/v1/coursesMte",
                null,
                body, HttpMethod.POST, CursoMteResponse.class);

        return Optional.ofNullable(resposta)
                .map(ResponseEntity::getBody)
                .map(CursoMteResponse::getId)
                .orElse(0l);
    }

    @Override
    public Long atualizarDadosCursoMTE(CursoMteRequest dadosCurso) throws JsonProcessingException {
        String body = mapper.writeValueAsString(dadosCurso);

        ResponseEntity<CursoMteResponse> resposta = cliente.requestClass(
                "/v1/coursesMte",
                null,
                body, HttpMethod.PUT, CursoMteResponse.class);

        return Optional.ofNullable(resposta)
                .map(ResponseEntity::getBody)
                .map(CursoMteResponse::getId)
                .orElse(0l);
    }

    @Override
    public List<TurmaCBOSecretaria> buscarDadosTurmaReserva(TurmaVagaSecretariaFiltro filtro) {
        MultiValueMap<String, String> params = converteQueryParams(filtro);
        ResponseEntity<TurmaCBOSecretariaResponse> resposta = cliente.requestClass("/v1/groupsByReserva/" + filtro.getIdReserva(), params, HttpMethod.GET, TurmaCBOSecretariaResponse.class);

        return Optional.ofNullable(resposta.getBody())
                .map(TurmaCBOSecretariaResponse::getData)
                .orElse(new ArrayList<>());
    }
    
    @Override
    @SuppressWarnings("unchecked")
    public List<DadosTurmaAprendiz> buscarDadosTurmaByEstudanteAndContrato(ContratoAprendizFiltro filtro) {
        MultiValueMap<String, String> params = converteQueryParams(filtro);
        ResponseEntity<DadosTurmaAprendiz[]> resposta = cliente.requestClass("/v1/apprenticeTraining", params, HttpMethod.GET, DadosTurmaAprendiz[].class);

        return Arrays.asList(resposta.getBody());
    }
    
    @Override
    public void cancelarRescindir(CancelarRescindirRequest request) {
		try {
			cliente.requestClass("/v1/contracts", null, request, HttpMethod.PUT, null);
		} catch (Exception e) {
			throw new CancelamentoRescisaoSecretariaException("Erro ao enviar cancelamento/rescisão para a Secretaria");
		}
            
    }
    
	@Override
	@SuppressWarnings("unchecked")
	public List<InstrutorTurma> buscarDadosInstrutor(InstrutorFiltro filtro) {
		try {
			String body = mapper.writeValueAsString(filtro);
			ResponseEntity<InstrutorTurma[]> resposta = cliente.requestClass("/v1/groupInstructor", null, body,
					HttpMethod.POST, InstrutorTurma[].class);

			return Arrays.asList(resposta.getBody());
		} catch (Exception e) {
			return null;
		}
	}

	@Override
	public Double buscarAproveitamentoAprendiz(DadosTcaAprendizFiltro dadosTcaAprendizFiltro)
			throws JsonProcessingException {

		MultiValueMap<String, String> params = converteQueryParams(dadosTcaAprendizFiltro);
		ResponseEntity<PercentualAprendizResponse> resposta = cliente.requestClass("/v1/achievement", params,
				HttpMethod.GET, PercentualAprendizResponse.class);

		return Optional.ofNullable(resposta).map(ResponseEntity::getBody)
				.map(PercentualAprendizResponse::getPorcentagem)
				.orElse(Double.valueOf(0));
	
	}

	
	@Override
	@SuppressWarnings("unchecked")
	public List<DiarioDeBordoResponse> obterDiarioDeBordoSecretaria(DiarioDeBordoSecretariaFiltro diarioDeBordoFiltro) {
		MultiValueMap<String, String> params = converteQueryParams(diarioDeBordoFiltro);
		ResponseEntity<DiarioDeBordoResponse[]> resposta = cliente.requestClass("/v1/logbook", params, HttpMethod.GET,
				DiarioDeBordoResponse[].class);

		return Arrays.asList(resposta.getBody());
	}

}


