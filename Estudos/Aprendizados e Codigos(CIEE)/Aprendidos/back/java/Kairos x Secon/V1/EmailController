package br.com.adtsys.ciee.student.email.controller;

import br.com.adtsys.ciee.student.email.controller.AbstractEmailController;
import br.com.adtsys.ciee.student.email.exception.EmailAlreadyRegistered;
import br.com.adtsys.ciee.student.email.model.EmailDTO;
import br.com.adtsys.ciee.student.email.service.EmailService;
import br.com.adtsys.ciee.student.email.service.exception.MainEmailCannotBeDeleteException;
import br.com.adtsys.ciee.student.handler.annotations.ValidarRequisicaoEstudante;
import br.com.adtsys.ciee.student.student.service.exception.InvalidTokenException;
import br.com.adtsys.ciee.student.utils.TokenValidation;
import br.org.ciee.kairos.architecture.core.exception.BaseException;
import br.org.ciee.kairos.architecture.core.exception.resource.ResourceNotFoundException;
import org.modelmapper.ModelMapper;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.util.List;

@RestController
@ValidarRequisicaoEstudante("idEstudante")
@RequestMapping("{idEstudante}/email")
public class EmailController extends AbstractEmailController {
    public EmailController(EmailService emailService, ModelMapper modelMapper) {
        super(emailService, modelMapper);
    }

    @PostMapping
    @ResponseStatus(code = HttpStatus.CREATED)
    public EmailDTO inserir(@PathVariable("idEstudante") Long idEstudante,
            @Valid @RequestBody EmailDTO dto) throws ResourceNotFoundException, EmailAlreadyRegistered {
        return super.inserir(idEstudante, dto);
    }
    
    @PostMapping("/pp")
    @ResponseStatus(code = HttpStatus.CREATED)
    public EmailDTO inserirPP(@PathVariable("idEstudante") Long idEstudante,
            @Valid @RequestBody EmailDTO dto) throws ResourceNotFoundException, EmailAlreadyRegistered {
        return super.inserirPP(idEstudante, dto);
    }

    @PutMapping("/{id}")
    public EmailDTO atualizar(@PathVariable("id") Long id,
            @PathVariable("idEstudante") Long idEstudante,
            @Valid @RequestBody EmailDTO dto) throws ResourceNotFoundException {
        return super.atualizar(id, idEstudante, dto);
    }
    
    @PutMapping("/{id}/pp")
    public EmailDTO atualizarPP(@PathVariable("id") Long id,
            @PathVariable("idEstudante") Long idEstudante,
            @Valid @RequestBody EmailDTO dto) throws ResourceNotFoundException {
        return super.atualizarPP(id, idEstudante, dto);
    }

    @DeleteMapping("/{id}")
    @ResponseStatus(code = HttpStatus.NO_CONTENT)
    public void deletar(@PathVariable("id") Long id,
            @PathVariable("idEstudante") Long idEstudante) throws ResourceNotFoundException, MainEmailCannotBeDeleteException {
        super.deletar(id, idEstudante);
    }

    @GetMapping
    public List<EmailDTO> buscarPorEstudante(@PathVariable("idEstudante") Long idEstudante) throws ResourceNotFoundException {
        return super.buscarPorEstudante(idEstudante);
    }


    @PostMapping("{id}/token/request")
    @ResponseStatus(HttpStatus.OK)
    public void emailTokenRequest(@PathVariable("id") Long id,
            @PathVariable("idEstudante") Long idEstudante) throws BaseException {
       super.emailTokenRequest(id, idEstudante);
    }

    @PostMapping("{id}/token/validate")
    @ResponseStatus(HttpStatus.OK)
    public void emailTokenValidate(@PathVariable("id") Long id,
            @PathVariable("idEstudante") Long idEstudante,
            @Valid @RequestBody TokenValidation tokenValidation) throws InvalidTokenException, ResourceNotFoundException {
        super.emailTokenValidate(id, idEstudante, tokenValidation);
    }

    @PostMapping("{id}/main")
    @ResponseStatus(HttpStatus.OK)
    public void emailSetMain(@PathVariable("id") Long id,
            @PathVariable("idEstudante") Long idEstudante) throws BaseException {
        super.emailSetMain(id, idEstudante);
    }
    
    @PreAuthorize("hasAnyAuthority('link_email_stud')")
    @PostMapping("{id}/vincular-email-acesso")
    @ResponseStatus(HttpStatus.OK)
    public void emailLinkAcess(@PathVariable("id") Long id,
            @PathVariable("idEstudante") Long idEstudante) throws ResourceNotFoundException {
        super.emailLinkAcess(id, idEstudante);
    }
}
