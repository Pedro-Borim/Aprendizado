package br.com.adtsys.ciee.company.contractplaces.repository.imp;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import javax.sql.DataSource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import br.com.adtsys.ciee.company.contract.enumeration.CompanyTypeEnum;
import br.com.adtsys.ciee.company.contractplaces.enumeration.ContractPlacesEnum;
import br.com.adtsys.ciee.company.contractplaces.model.ContractPlacesAddressManagerView;
import br.com.adtsys.ciee.company.contractplaces.model.ContractPlacesDTO;
import br.org.ciee.kairos.architecture.data.helper.PaginationHelper;
import br.org.ciee.kairos.architecture.data.procedures.GeneralProcedures;

@Repository
public class ContractPlacesRespositoryImpl {

  @Autowired
  GeneralProcedures generalProcedures;

  private static final String ID = "ID";
  private static final String TIPO_LOGRADOURO = "TIPO_LOGRADOURO";
  private static final String ENDERECO = "ENDERECO";
  private static final String NUMERO = "NUMERO";
  private static final String BAIRRO = "BAIRRO";
  private static final String COMPLEMENTO = "COMPLEMENTO";
  private static final String CEP = "CEP";
  private static final String CIDADE = "CIDADE";
  private static final String UF = "UF";
  private static final String DESCRICAO_GERENCIA = "DESCRICAO_GERENCIA";
  private static final String DESCRICAO_UNIDADE_CIEE = "DESCRICAO_UNIDADE_CIEE";
  private static final String DESCRICAO_UNIDADE_CIEE_LOCAL = "DESCRICAO";
  private static final String BLOQUEADO = "BLOQUEADO";
  private static final String ID_CONTRATO = "ID_CONTRATO";
  private static final String CNPJ = "CNPJ";
  private static final String CPF = "CPF";
  private static final String NOME = "NOME";
  private static final String RAZAO_SOCIAL = "RAZAO_SOCIAL";
  private static final String SITUACAO = "SITUACAO";
  private static final String TIPO_PESSOA_EMPRESA = "TIPO_PESSOA_EMPRESA";
  private static final String DESCRICAO_LOCAL = "DESCRICAO_LOCAL";
  private static final String ID_CARTEIRA = "ID_CARTEIRA";
  private static final String DESCRICAO_CARTEIRA = "DESCRICAO_CARTEIRA";
  private static final String NOME_ASSISTENTE = "NOME_ASSISTENTE";
  
  private static final String MAIN_QUERY = "SELECT" +
    "  LC.ID," +
    "  E.TIPO_LOGRADOURO," +
    "  E.ENDERECO," +
    "  E.NUMERO," +
    "  E.BAIRRO," +
    "  E.COMPLEMENTO," +
    "  E.CEP," +
    "  E.CIDADE," +
    "  E.UF," +
    "  LE.DESCRICAO_GERENCIA," +
    "  LE.DESCRICAO_UNIDADE_CIEE," +
    "  LC.BLOQUEADO," +
    "  LC.ID_CONTRATO," +
    "  LC.CNPJ," +
    "  LC.CPF," +
    "  LC.NOME," +
    "  LC.RAZAO_SOCIAL," +
    "  LC.SITUACAO," +
    "  LC.TIPO_PESSOA_EMPRESA," +
    "  LC.DESCRICAO_LOCAL," +
    "  LC.ID_CARTEIRA," + 
    "  RCU.DESCRICAO DESCRICAO_CARTEIRA," + 
    "  RPU.NOME NOME_ASSISTENTE," +
    "  REPUC.DESCRICAO" +
    " FROM " +
    "  ENDERECOS E" +
    "  JOIN LOCAIS_ENDERECOS LE ON E.ID = LE.ID_ENDERECO" +
    // left aqui porque a tabela ainda não está populada.
    "  LEFT JOIN REP_UNIDADES_CIEE_UNIT REPUC ON LE.ID_UNIDADE_CIEE_LOCAL = REPUC.ID" +
    // Aqui fazemos RIGHT JOIN para retornar locais de contrato tanto com endereço (ATIVOS) quanto
    // sem endereço (PENDENTES)
    "  RIGHT JOIN LOCAIS_CONTRATO LC ON LC.ID = LE.ID_LOCAL_CONTRATO" + 
    "  LEFT JOIN REP_CARTEIRAS_UNIT RCU ON RCU.ID = LC.ID_CARTEIRA" + 
    "  LEFT JOIN REP_ASSISTENTES_UNIT RAU ON RAU.ID = RCU.ID_ASSISTENTE" + 
    "  LEFT JOIN REP_PESSOAS_UNIT RPU ON RPU.ID = RAU.ID_PESSOA" +
    " WHERE" +
    "  1 = 1";

  private final PaginationHelper<ContractPlacesAddressManagerView> paginationHelper = new PaginationHelper<>();

  private NamedParameterJdbcTemplate jdbcTemplate;

  @Autowired
  public void ContractRepository(DataSource dataSource) {
    this.jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
  }

  private static final RowMapper<ContractPlacesAddressManagerView> ROW_MAPPER = (rs, rowNum) -> ContractPlacesAddressManagerView.builder()
    .id(rs.getLong(ID))
    .contract(rs.getLong(ID_CONTRATO))
    .address(formatAddressOutput(rs))
    .cep(rs.getString(CEP))
    .managementDescription(rs.getString(DESCRICAO_GERENCIA))
    .cieeUnitDescription(rs.getString(DESCRICAO_UNIDADE_CIEE))
    .cieeUnitLocalDescription(Optional.ofNullable(rs.getString(DESCRICAO_UNIDADE_CIEE_LOCAL)).orElse(rs.getString(DESCRICAO_UNIDADE_CIEE)))
    .name(rs.getString(NOME))
    .companyName(rs.getString(RAZAO_SOCIAL))
    .cpf(rs.getString(CPF))
    .cnpj(rs.getString(CNPJ))
    .status(ContractPlacesEnum.fromDatabase(rs.getString(SITUACAO)))
    .blocked(rs.getBoolean(BLOQUEADO))
    .companyPersonType(CompanyTypeEnum.fromDatabase(rs.getString(TIPO_PESSOA_EMPRESA)))
    .descricaoLocal(rs.getString(DESCRICAO_LOCAL))
    .idCarteira(rs.getLong(ID_CARTEIRA))
    .descricaoCarteira(rs.getString(DESCRICAO_CARTEIRA))
    .nomeAssistente(rs.getString(NOME_ASSISTENTE))
    .build();

  public Page<ContractPlacesAddressManagerView> search(ContractPlacesDTO filter, Pageable pageable) {

    MapSqlParameterSource parameters = new MapSqlParameterSource();
    StringBuilder sql = new StringBuilder(MAIN_QUERY);

    this.concatClauses(parameters, sql, filter);

    generalProcedures.accentAndCaseInsensitive(true);
    try {
        return paginationHelper.fetchPage(jdbcTemplate,
                sql.toString(),
                parameters,
                pageable,
                ROW_MAPPER);
    } finally {
      generalProcedures.accentAndCaseInsensitive(false);
    }
  }

  private static String formatAddressOutput(ResultSet rs) throws SQLException {

    StringBuilder address = new StringBuilder(StringUtils.EMPTY);

    if (Objects.nonNull(rs)) {

      String addressType = rs.getString(TIPO_LOGRADOURO);
      String street = rs.getString(ENDERECO);
      String placeNumber = rs.getString(NUMERO);
      String neighborhood = rs.getString(BAIRRO);
      String complement = rs.getString(COMPLEMENTO);
      String city = rs.getString(CIDADE);
      String state = rs.getString(UF);

      concatAddressToOutput(address, StringUtils.EMPTY, addressType);
      concatAddressToOutput(address, " ", street);
      concatAddressToOutput(address, ", ", placeNumber);
      concatAddressToOutput(address, ", ", complement);
      concatAddressToOutput(address, " - ", neighborhood);
      concatAddressToOutput(address, " - ", city);
      concatAddressToOutput(address, "/", state);
    }

    return address.toString();
  }

  private static void concatAddressToOutput(StringBuilder sb, String signal, String text) {

    if (StringUtils.isNotBlank(text)) {
      sb.append(signal + text);
    }
  }

  private void concatClauses(MapSqlParameterSource parameterSource, StringBuilder sql, ContractPlacesDTO filter) {

    String status = Objects.nonNull(filter.getStatus()) ? filter.getStatus().getContract() : null;
    this.setStringParameterToQuery(parameterSource, sql, status, " AND LC.SITUACAO = :status", "status");
    this.setStringParameterToQuery(parameterSource, sql, filter.getCep(), " AND E.CEP = :cep", "cep");
    this.setLongParameterToQuery(parameterSource, sql, filter.getContractId(), " AND LC.ID_CONTRATO = :contractId", "contractId");
    this.setLongParameterToQuery(parameterSource, sql, filter.getManagementId(), " AND LE.ID_GERENCIA = :managementId", "managementId");
    this.setLongParameterToQuery(parameterSource, sql, filter.getCieeUnitId(), " AND LE.ID_UNIDADE_CIEE = :cieeUnitId " +
            "OR LE.ID_UNIDADE_CIEE_LOCAL = :cieeUnitId", "cieeUnitId");
    this.setBooleanParameterToQuery(parameterSource, sql, filter.getBlocked(), " AND LC.BLOQUEADO = :blocked", "blocked");
    this.setBooleanParameterToQuery(parameterSource, sql, filter.getDeletado(), " AND LC.DELETADO = :deletado", "deletado");
    this.setDescricaoLocalParameterToQuery(parameterSource, sql, filter.getDescricaoLocal());
    this.setLongParameterToQuery(parameterSource, sql, filter.getIdCarteira(), " AND LC.ID_CARTEIRA = :idCarteira", "idCarteira");
    this.setNameParameterInSearch(parameterSource, sql, filter);
    this.setDocumentParameterToQuery(parameterSource, sql, filter);
    
    setAddressFilter(parameterSource, sql, filter);
  }

  private void setAddressFilter(MapSqlParameterSource parameterSource, StringBuilder sql,
      ContractPlacesDTO filter) {
    if (StringUtils.isNotEmpty(filter.getAddress())) {
      String parametroEndereco = "addressParam";
      
      sql.append(" AND (");
      
      List<String> camposEndereco = Arrays.asList(
              TIPO_LOGRADOURO, ENDERECO, NUMERO, BAIRRO, COMPLEMENTO, CEP, CIDADE, UF);
      
      String condicional = "";
      
      for (String campoEndereco : camposEndereco) {
          sql.append(getCampoEnderecoCondicao(condicional, campoEndereco, parametroEndereco));
          condicional = " OR ";
      }
      
      sql.append(") ");
      
      parameterSource.addValue(parametroEndereco, "%" + filter.getAddress() + "%");
    }
  }

  private String getCampoEnderecoCondicao(String condicional, String campoEndereco, String parametroEndereco) {
    return new StringBuilder(condicional).append("E.").append(campoEndereco)
            .append(" LIKE :").append(parametroEndereco).toString();
  }

  private void setNameParameterInSearch(MapSqlParameterSource parameterSource, StringBuilder sql, ContractPlacesDTO filter) {

    String placeholder = "name";

    String nameParam = " AND (" +
      " lc.nome LIKE :" + placeholder + "" +
      " OR lc.razao_social LIKE :" + placeholder + "" +
      ")";

    if (StringUtils.isNotBlank(filter.getName())) {
      sql.append(nameParam);
      parameterSource.addValue(placeholder, "%" + filter.getName() + "%");
    }
  }

  private void setDocumentParameterToQuery(MapSqlParameterSource parameterSource, StringBuilder sql, ContractPlacesDTO filter) {

    String placeholder = "document";

    String documentParam = " AND (" +
      " lc.cnpj = :" + placeholder + "" +
      " OR lc.cpf = :" + placeholder + "" +
      ")";

    if (StringUtils.isNotBlank(filter.getDocument())) {
      sql.append(documentParam);
      parameterSource.addValue(placeholder, filter.getDocument());
    }
  }

  private void setLongParameterToQuery(MapSqlParameterSource parameterSource, StringBuilder sql, Long filter, String parameter, String placeholder) {
    if (Objects.nonNull(filter)) {
      sql.append(parameter);
      parameterSource.addValue(placeholder, filter);
    }
  }

  private void setStringParameterToQuery(MapSqlParameterSource parameterSource, StringBuilder sql, String filter, String parameter, String placeholder) {
    if (Objects.nonNull(filter)) {
      sql.append(parameter);
      parameterSource.addValue(placeholder, filter);
    }
  }

  private void setBooleanParameterToQuery(MapSqlParameterSource parameterSource, StringBuilder sql, Boolean filter, String parameter, String placeholder) {
    if (Objects.nonNull(filter)) {
      sql.append(parameter);
      parameterSource.addValue(placeholder, filter);
    }
  }
  
  private void setDescricaoLocalParameterToQuery(MapSqlParameterSource parameterSource, StringBuilder sql, String filter) {
	    if (Objects.nonNull(filter)) {
	      String placeholder = "descricaoLocal";
	      String sqlDescricaoLocal = " AND LC.DESCRICAO_LOCAL like :descricaoLocal";
	      
	      sql.append(sqlDescricaoLocal);
	      parameterSource.addValue(placeholder, "%"+filter+"%");
	    }
	  }

}
