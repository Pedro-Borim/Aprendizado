package br.com.adtsys.ciee.company.utils.specification;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public interface SpecificationBase<Entidade> {

    default void notIn(String nomeParametro, Collection<?> lista, Root<Entidade> root,
                       Predicate predicate) {
        if (Objects.nonNull(lista) && !lista.isEmpty()) {
            Predicate notInPredicate = root.get(nomeParametro).in(lista).not();
            predicate.getExpressions().add(notInPredicate);
        }
    }

    default void equal(
            String paramName,
            Object paramValue,
            Root<Entidade> root,
            CriteriaBuilder criteriaBuilder,
            Predicate predicate) {
        Optional.ofNullable(paramValue).ifPresent(param -> predicate.getExpressions()
                .add(criteriaBuilder.equal(root.get(paramName), param)));
    }

    default void like(
            String paramName,
            Object paramValue,
            Root<Entidade> root,
            CriteriaBuilder criteriaBuilder,
            Predicate predicate) {
        Optional.ofNullable(paramValue).ifPresent(param -> predicate.getExpressions()
            .add(criteriaBuilder.like(root.get(paramName), this.colocaWildCard(String.valueOf(param)))));
    }

    default void in(
            String nomeParametro,
            Collection<?> lista,
            Root<Entidade> root,
            Predicate predicate) {
        Optional.ofNullable(lista).ifPresent(param -> predicate.getExpressions()
            .add(root.get(nomeParametro).in(lista)));
    }

    default void equalJoin(
            String nomeParametro,
            Object paramValue,
            Join join,
            CriteriaBuilder criteriaBuilder,
            Predicate predicate) {
        Optional.ofNullable(paramValue).ifPresent( param -> {
            List expressoes = predicate.getExpressions();
            expressoes.add(criteriaBuilder.equal(join.get(nomeParametro), param));
        });
    }

    default String colocaWildCard(String param) {
        return "%" + param + "%";
    }

}
