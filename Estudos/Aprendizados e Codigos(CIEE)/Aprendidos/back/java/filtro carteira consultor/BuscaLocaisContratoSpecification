package br.com.adtsys.ciee.company.contractplaces.repository.specification;

import br.com.adtsys.ciee.company.contract.model.Contract;
import br.com.adtsys.ciee.company.contractplaces.dto.LocaisContratoParams;
import br.com.adtsys.ciee.company.contractplaces.model.ContractPlaces;
import br.com.adtsys.ciee.company.utils.specification.SpecificationBase;
import org.springframework.data.jpa.domain.Specification;

import javax.persistence.criteria.*;
import java.util.List;


public class BuscaLocaisContratoSpecification implements Specification, SpecificationBase {

    private LocaisContratoParams filter;

    public BuscaLocaisContratoSpecification(LocaisContratoParams filter) {
        this.filter = filter;
    }

    @Override
    public Predicate toPredicate(Root root, CriteriaQuery query, CriteriaBuilder criteriaBuilder) {
        Predicate predicate = criteriaBuilder.conjunction();
        this.filtraPorContrato(root, criteriaBuilder, predicate);
        this.filtraPorNome(root, criteriaBuilder, predicate);
        this.filtraPorDocumento(root, criteriaBuilder, predicate);
        this.filtraPorEndereco(root, criteriaBuilder, predicate);
        this.filtraNotEqualIdLocal(root, criteriaBuilder, predicate);
        this.filtraEqualIdLocal(root, criteriaBuilder, predicate);
        this.filtraPorDescricao(root, criteriaBuilder, predicate);
        this.filtraPorCarteira(root, criteriaBuilder, predicate);
        this.equal("situacao", this.filter.getStatus(), root, criteriaBuilder, predicate);
        this.in("idUnidadeCIEE", this.filter.getCieeUnitIds(), root, predicate);
        this.equal("idGerencia", this.filter.getManagementId(), root, criteriaBuilder, predicate);
        this.equal("bloqueado", this.filter.getBlocked(), root, criteriaBuilder, predicate);
        this.equal("cep", this.filter.getCep(), root, criteriaBuilder, predicate);
        return predicate;
    }

    private void filtraPorEndereco(Root root, CriteriaBuilder criteriaBuilder, Predicate predicate) {
        if (this.filter.getAddress() != null && !this.filter.getAddress().isEmpty()) {
            List expressoes = predicate.getExpressions();
            String enderecoComWildCard = this.colocaWildCard(this.filter.getAddress());
            expressoes.add(
                criteriaBuilder.or(criteriaBuilder.like(this.concatenaEndereco(root, criteriaBuilder), enderecoComWildCard))
            );
        }
    }

    private void filtraPorDocumento(Root root, CriteriaBuilder criteriaBuilder, Predicate predicate) {
        if (this.filter.getDocument() != null && !this.filter.getDocument().isEmpty()) {
            List expressoes = predicate.getExpressions();
            String documentoComWildCard = this.colocaWildCard(this.filter.getDocument());
            Expression buscaCNPJ = criteriaBuilder.like(root.get("cnpj"), documentoComWildCard);
            Expression buscaCPF = criteriaBuilder.like(root.get("cpf"), documentoComWildCard);
            expressoes.add(criteriaBuilder.or(buscaCNPJ, buscaCPF));
        }
    }

    private void filtraPorContrato(Root root, CriteriaBuilder criteriaBuilder, Predicate predicate) {
        Join<ContractPlaces, Contract> contratoJoin = root.join("contrato");
        this.equalJoin("id", this.filter.getContractId(), contratoJoin, criteriaBuilder, predicate);
    }

    private void filtraPorNome(Root root, CriteriaBuilder criteriaBuilder, Predicate predicate) {
        if (this.filter.getName() != null && !this.filter.getName().isEmpty()) {
            List expressoes = predicate.getExpressions();
            String nomeComWildCard = this.colocaWildCard(this.filter.getName());
            Expression buscaRazaoSocial = criteriaBuilder.like(root.get("razaoSocial"), nomeComWildCard);
            Expression buscaNome = criteriaBuilder.like(root.get("nome"), nomeComWildCard);
            expressoes.add(criteriaBuilder.or(buscaNome, buscaRazaoSocial));
        }
    }

    private void filtraNotEqualIdLocal(Root root, CriteriaBuilder criteriaBuilder, Predicate predicate) {
        if (this.filter.getContractPlaceId() != null) {
            List expressoes = predicate.getExpressions();
            expressoes.add(criteriaBuilder.notEqual(root.get("id"), filter.getContractPlaceId()));
        }
    }
    
    private void filtraEqualIdLocal(Root root, CriteriaBuilder criteriaBuilder, Predicate predicate) {
        if (this.filter.getIdLocalContrato() != null) {
            List expressoes = predicate.getExpressions();
            expressoes.add(criteriaBuilder.equal(root.get("id"), filter.getIdLocalContrato()));
        }
    }
    
    private void filtraPorDescricao(Root root, CriteriaBuilder criteriaBuilder, Predicate predicate) {
        if (this.filter.getDescricaoLocal() != null && !this.filter.getDescricaoLocal().isEmpty()) {
            List expressoes = predicate.getExpressions();
            String descricaoComWildCard = this.colocaWildCard(this.filter.getDescricaoLocal());
            expressoes.add(criteriaBuilder.like(root.get("descricaoLocal"), descricaoComWildCard));
        }
    }
    
    private void filtraPorCarteira(Root root, CriteriaBuilder criteriaBuilder, Predicate predicate) {
        if (this.filter.getCarteiraConsultor() != null) {
            List expressoes = predicate.getExpressions();
            expressoes.add(criteriaBuilder.equal(root.get("idCarteira"), filter.getCarteiraConsultor()));
        }
    }

    private Expression<String> concatenaEndereco(Root root, CriteriaBuilder criteriaBuilder) {

        Expression<String> tipoLogradouro = criteriaBuilder.concat(root.get("tipoLogradouro"), " ");
        Expression<String> tipoLogradouroMaisendereco = criteriaBuilder.concat(tipoLogradouro, root.get("endereco"));
        Expression<String> endereco = criteriaBuilder.concat(tipoLogradouroMaisendereco, ", ");
        Expression<String> enderecoMaisNumero = criteriaBuilder.concat(endereco, root.get("numero"));
        Expression<String> numero = criteriaBuilder.concat(enderecoMaisNumero, ", ");
        Expression<String> numeroMaisComplemento = criteriaBuilder.concat(numero, root.get("complemento"));
        Expression<String> bairro = criteriaBuilder.concat(numeroMaisComplemento, " - ");
        Expression<String> bairroMaisComplemento = criteriaBuilder.concat(bairro, root.get("bairro"));
        Expression<String> cidade = criteriaBuilder.concat(bairroMaisComplemento, " - ");
        Expression<String> cidadeMaisBairro = criteriaBuilder.concat(cidade, root.get("cidade"));
        Expression<String> uf = criteriaBuilder.concat(cidadeMaisBairro, "/");

        return criteriaBuilder.concat(uf, root.get("uf"));

    }
}
