package br.com.adtsys.ciee.company.reppessoasunit.model;

import java.util.Comparator;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;

import br.com.adtsys.ciee.company.repemailsunit.model.RepEmailsUnit;
import br.org.ciee.kairos.architecture.base.model.BaseModel;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "REP_PESSOAS_UNIT")
@Data
@AllArgsConstructor
@NoArgsConstructor
@EqualsAndHashCode(callSuper = false)
public class RepPessoasUnit extends BaseModel{

	private static final long serialVersionUID = -4574431413042977676L;

	@Id
    private Long id;

    @Column(name = "NOME")
    private String nome;
    
    @Column(name = "CARGO")
    private String cargo;
    
    @Column(name = "CARGO_REDUZIDO")
    private String cargoReduzido;
    
    @Column(name = "CODIGO_CIEE")
    private String codigoCiee;
    
    @Column(name = "DEPARTAMENTO")
    private String departamento;
    
    @Column(name = "MATRICULA")
    private String matricula;
    
    @Column(name = "NOME_REDUZIDO")
    private String nomeReduzido;
    
    @Column(name = "NUMERO_DOCUMENTO")
    private String numeroDocumento;
    
    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JoinTable(name = "rep_pessoas_emails_unit", joinColumns = { @JoinColumn(name = "id_pessoa") }, inverseJoinColumns = {
        @JoinColumn(name = "id_email") })
    private List<RepEmailsUnit> emails;
    
    @Transient
    public String obterEmailMaisRecente() {
        return this.getEmails().stream()
                .filter(email -> Objects.nonNull(email.getEndereco()))
                .filter(email -> !email.isDeleted())
                .min(Comparator.comparing(BaseModel::getModifiedDate))
                .map(RepEmailsUnit::getEndereco)
                .orElse(StringUtils.EMPTY);
    }

}
