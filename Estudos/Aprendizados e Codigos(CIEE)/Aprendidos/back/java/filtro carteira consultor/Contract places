package br.com.adtsys.ciee.company.contractplaces.model;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Convert;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Where;
import org.hibernate.validator.constraints.Email;
import org.hibernate.validator.constraints.br.CNPJ;
import org.hibernate.validator.constraints.br.CPF;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

import br.com.adtsys.ciee.company.cieeactivity.model.CieeActivity;
import br.com.adtsys.ciee.company.classcouncil.model.ClassCouncil;
import br.com.adtsys.ciee.company.companyporte.enumeration.CompanyPorteEnum;
import br.com.adtsys.ciee.company.contract.enumeration.CompanyTypeEnum;
import br.com.adtsys.ciee.company.contract.model.Contract;
import br.com.adtsys.ciee.company.contractplaces.enumeration.ContractPlacesEnum;
import br.com.adtsys.ciee.company.contractplacesaddresses.model.ContractPlacesAddress;
import br.com.adtsys.ciee.company.contractplacesrepresentative.model.ContractPlacesRepresentative;
import br.com.adtsys.ciee.company.converter.CompanyPorteConverter;
import br.com.adtsys.ciee.company.converter.CompanyTypeConverter;
import br.com.adtsys.ciee.company.converter.ContractPlacesConverter;
import br.com.adtsys.ciee.company.converter.CorporateSegmentTypeConverter;
import br.com.adtsys.ciee.company.migracao.converter.ControleMigracaoConverter;
import br.com.adtsys.ciee.company.person.model.Person;
import br.com.adtsys.ciee.company.phone.model.Phone;
import br.com.adtsys.ciee.company.preregistration.enumeration.SegmentCompanyType;
import br.org.ciee.kairos.architecture.base.model.BaseModel;
import br.org.ciee.kairos.architecture.config.json.JsonProfile;
import br.org.ciee.kairos.architecture.data.generators.CustomSequenceGenerator;
import br.org.ciee.kairos.logs.integracoes.migracao.enumeration.ControleMigracao;
import br.org.ciee.kairos.replication.model.DadoReplicado;
import br.org.ciee.kairos.replication.model.TipoReplicacao;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;

@Table(name = "LOCAIS_CONTRATO")
@Data
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(callSuper = false, exclude = { "contract", "contractPlacesAddresses", "phones", "contacts",
		"contractPlacesRepresentatives" })
@Where(clause = "DELETADO = 0")
@ToString(exclude = { "contract", "contractPlacesAddresses", "phones", "contacts", "contractPlacesRepresentatives" })
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class ContractPlaces extends BaseModel implements DadoReplicado {

	@Id
	@GenericGenerator(name = "custom-sequence", strategy = CustomSequenceGenerator.STRATEGY, parameters = {
			@Parameter(name = "sequence_name", value = "SEQ_LOCAIS_CONTRATO"),
			@Parameter(name = "initial_value", value = "1"), @Parameter(name = "increment_size", value = "1") })
	@GeneratedValue(generator = "custom-sequence", strategy = GenerationType.SEQUENCE)
	private Long id;

	@NotNull(message = "Contrato é uma informação obrigatória")
	@ManyToOne(optional = false, fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_CONTRATO", nullable = false)
	@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
	@JsonIdentityReference(alwaysAsId = true)
	private Contract contract;

	@Column(name = "CNPJ", length = 14)
	@CNPJ(message = "CNPJ inválido")
	private String cnpj;

	@Column(name = "RAZAO_SOCIAL", length = 150)
	@Size(message = "'Razão Social' possui limite máximo de 150 caracteres", max = 150)
	private String companyName;

	@Column(name = "NOME_FANTASIA", length = 150)
	@Size(message = "'Nome Fantasia' possui limite máximo de 150 caracteres", max = 150)
	private String tradingName;

	@Column(name = "CPF", length = 11)
	@CPF(message = "CPF inválido")
	private String cpf;

	@Column(name = "NOME", length = 150)
	@Size(message = "'Nome' possui limite máximo de 150 caracteres", max = 150)
	private String name;

	@Column(name = "DATA_NASCIMENTO")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private LocalDate birthDate;

	@Column(name = "CEI", length = 12)
	private Long cei;

	@Column(name = "NUMERO_CONSELHO", length = 20)
	@Size(message = "'Número do Conselho' possui limite máximo de 20 caracteres", max = 20)
	private String councilNumber;

	@Column(name = "VALIDADE_REGISTRO")
	@JsonFormat(shape = JsonFormat.Shape.STRING)
	private LocalDate registerValidity;

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "ID_CONSELHO_CLASSES")
	private ClassCouncil classCouncil;

	@ManyToOne
	@JoinColumn(name = "ID_ATIVIDADES_CIEE")
	private CieeActivity activity;

	@Column(name = "TIPO_EMPRESA", length = 50)
	@Convert(converter = CorporateSegmentTypeConverter.class)
	private SegmentCompanyType companyType;

	@Column(name = "UF", length = 2, nullable = false)
	private String state;

	@Column(name = "ISENCAO_INSCRICAO_ESTADUAL")
	private Boolean freeStateInscription;

	@Column(name = "CONTRATACAO_JOVEM_TALENTO", nullable = false, columnDefinition = "BOOLEAN DEFAULT false")
	private Boolean jovemTalento;
	
	@Column(name = "INSCRICAO_ESTADUAL", length = 50)
	private String stateInscription;

	@Column(name = "INSCRICAO_MUNICIPAL", length = 18)
	private String municipalInscription;

	@Column(name = "SITE")
	private String site;

	@Column(name = "ADMINISTRADOR_CONTRATO")
	private Boolean isContractAdmin;

	@Column(name = "CI_DIFERENCIADA")
	private Boolean isDifferentiatedCi;

	@Column(name = "VALOR_CI", precision = 7, scale = 2)
	private BigDecimal amountCi;

	@Column(name = "NFE")
	private Boolean hasElectronicInvoice;

	@Email
	@Size(message = "'Endereço' deve ter tamanho máximo de 100 caracteres", max = 100)
	@Column(name = "NFE_EMAIL", length = 100)
	private String electronicInvoiceEmail;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_LOCAL_CONTRATO_ORIGINAL")
	@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
	@JsonIdentityReference(alwaysAsId = true)
	private ContractPlaces localOriginal;

	@Column(name = "DATA_CLONAGEM")
	@JsonView(JsonProfile.ExpandedView.class)
	private ZonedDateTime dataClonagem;

	@JsonIgnore
	@OneToMany(mappedBy = "contractPlace", cascade = { CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE })
	private List<ContractPlacesAddress> contractPlacesAddresses;

	@JsonIgnore
	@OneToOne(fetch = FetchType.LAZY, mappedBy = "contractPlace", cascade = { CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE })
	private ContractPlacesAddress contractPlacesAddress;

	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "LOCAIS_TELEFONES", joinColumns = {
			@JoinColumn(name = "ID_LOCAL_CONTRATO", nullable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "ID_TELEFONE", nullable = false) })
	private List<Phone> phones;

	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "LOCAIS_PESSOAS", joinColumns = {
			@JoinColumn(name = "ID_LOCAL_CONTRATO", nullable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "ID_PESSOA", nullable = false) })
	private List<Person> contacts;

	@JsonIgnore
	@OneToMany(mappedBy = "contractPlace", cascade = CascadeType.ALL)
	private List<ContractPlacesRepresentative> contractPlacesRepresentatives;

	@Column(name = "BLOQUEADO", columnDefinition = "BOOLEAN DEFAULT false", nullable = false)
	private Boolean blocked;

	@Column(name = "SITUACAO", nullable = false)
	@Convert(converter = ContractPlacesConverter.class)
	@NotNull(message = "'Status' é uma informação obrigatória")
	private ContractPlacesEnum status;

	@Column(name = "TIPO_PESSOA_EMPRESA", length = 50, nullable = false)
	@Convert(converter = CompanyTypeConverter.class)
	private CompanyTypeEnum companyPersonType;

	@Column(name = "CONSELHO_CLASSE_ATIVO")
	private Boolean isClassCouncilActive;

	@Column(name = "INTEGRACAO_TOTVS", columnDefinition = "BOOLEAN DEFAULT FALSE")
	private boolean integracaoTotvs;

	@Column(name = "CONTROLE_MIGRACAO")
	@Convert(converter = ControleMigracaoConverter.class)
	private ControleMigracao controleMigracao;
	
	@Column(name = "CNO", length = 12)
	@Size(message = "CNO inválido, deve ter 12 números", min = 12, max = 12)
	private String cno;
	
	@Column(name = "CAEPF", length = 14)
	@Size(message = "CAEPF inválido, deve ter 14 números", min = 14, max = 14)
	private String caepf;
	
	@Column(name = "PORTE_EMPRESA", length = 50)
	@Convert(converter = CompanyPorteConverter.class)
	private CompanyPorteEnum companyPorte;

	@Column(name = "DESCRICAO_LOCAL")
	private String descricaoLocal;
	
	@Column(name = "ID_CARTEIRA")
	private Long carteiraConsultor;
	
	@PrePersist
	public void prePersist() {
		if (Objects.isNull(this.blocked)) {
			this.blocked = Boolean.FALSE;
		}
	}

	@Override
	public TipoReplicacao getTipoReplicacao() {
		return TipoReplicacao.LOCAL_CONTRATO;
	}

	@Override
	public boolean podeReplicar() {
		return true;
	}

	@Transient
	private Long idConfiguracaoCobranca;
}
