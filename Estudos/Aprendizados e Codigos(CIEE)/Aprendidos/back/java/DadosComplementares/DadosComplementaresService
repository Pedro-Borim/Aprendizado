package br.com.adtsys.ciee.company.contract.service;

import br.com.adtsys.ciee.company.carteira.exception.CarteiraException;
import br.com.adtsys.ciee.company.carteira.model.Carteira;
import br.com.adtsys.ciee.company.carteira.repository.CarteiraRepository;
import br.com.adtsys.ciee.company.cieeactivity.model.CieeActivity;
import br.com.adtsys.ciee.company.cieeactivity.repository.CieeActivityRepository;
import br.com.adtsys.ciee.company.contract.exception.ComplementaryDataException;
import br.com.adtsys.ciee.company.contract.model.CompanyContractInfo;
import br.com.adtsys.ciee.company.contract.model.ComplementaryData;
import br.com.adtsys.ciee.company.contract.model.Contract;
import br.com.adtsys.ciee.company.legacy.service.ContractLegacyService;
import br.com.adtsys.ciee.company.preregistration.enumeration.SegmentCompanyType;
import br.com.adtsys.ciee.company.preregistration.enumeration.TypePerson;
import br.com.adtsys.ciee.company.publicbodyclassification.model.PublicBodyClassification;
import br.com.adtsys.ciee.company.publicbodyclassification.repository.PublicBodyClassificationRepository;
import br.org.ciee.kairos.architecture.base.service.impl.BaseServiceImpl;
import br.org.ciee.kairos.architecture.core.exception.BaseException;
import br.org.ciee.kairos.architecture.core.exception.resource.ResourceNotFoundException;
import lombok.SneakyThrows;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.util.Strings;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.Objects;
import java.util.Optional;

@Service
@Transactional
public class ComplementaryDataService extends BaseServiceImpl<ComplementaryData> {
  
  @Autowired
  private ContractService contractService;
  
  @Autowired
  private CieeActivityRepository cieeActivityRepository;
  
  @Autowired
  private PublicBodyClassificationRepository publicBodyClassificationRepository;
  
  @Autowired
  private CarteiraRepository carteiraRepository;
  
  @Autowired
  private CompanyContractInfoService companyContractInfoService;
  
  @Autowired
  private ContractLegacyService contractLegacyService;

  public ComplementaryData associarContrato(ComplementaryData dadosComplementares) throws BaseException {
    Contract contrato = findContract(dadosComplementares);

    this.associateComplementaryDataToContract(contrato, dadosComplementares);
    this.associateCompanyContractInfoActivity(dadosComplementares);

    return dadosComplementares;
  }

  @Override
  protected void prePersist(ComplementaryData complementaryData) throws BaseException {
    super.prePersist(complementaryData);
    validateRegistrationFields(complementaryData);
    validateTypePerson(complementaryData);
    validatePublicBodyClassification(complementaryData);
    validarIdCarteira(complementaryData);
    complementaryData.checkAllowIndependentProfessional();
  }

@Override
  protected void preUpdate(ComplementaryData complementaryData) throws BaseException {
    super.preUpdate(complementaryData);
    
    // Reload the complementary data from database e apply the fields received.
    // Validate the state that will be persisted
    Long id = complementaryData.getId();
    ComplementaryData complementaryDataToBePersisted = find(id);
    copyNonNullFields(complementaryData, complementaryDataToBePersisted);


    validateRegistrationFields(complementaryDataToBePersisted);
    validateChangingPublicBodyClassification(complementaryDataToBePersisted);
    validarIdCarteira(complementaryDataToBePersisted);
    complementaryDataToBePersisted.checkAllowIndependentProfessional();
    
    
    // Avoid changing data of others relationships.
    reloadRelationships(complementaryData);
    
  }

  private void validateChangingPublicBodyClassification(ComplementaryData complementaryData)
      throws ComplementaryDataException, ResourceNotFoundException {
    Contract contract = loadContract(complementaryData);
    Long contractId = contract.getId();
    complementaryData.setContractId(contractId);
    
    validatePublicBodyClassification(complementaryData);
  }

  private Contract loadContract(ComplementaryData complementaryData) throws ComplementaryDataException {
    Optional<Contract> optContract = contractService.findByComplementaryDataId(complementaryData.getId());
    return optContract.orElseThrow(() -> new ComplementaryDataException("Contrato não encontrado."));
  }
  
  private void associateComplementaryDataToContract(Contract contract, ComplementaryData modelSaved)
      throws BaseException {
    contract.setComplementaryData(modelSaved);
    contractService.save(contract);
  }


  private void reloadRelationships(ComplementaryData complementaryData) {
    CieeActivity activity = complementaryData.getActivity();
    if (Objects.nonNull(activity)) {
      Long id = activity.getId();
      Optional<CieeActivity> activityPersisted = cieeActivityRepository.findById(id);
      if (activityPersisted.isPresent())
        complementaryData.setActivity(activityPersisted.get());
    }
    
    PublicBodyClassification publicBodyClassification = complementaryData.getPublicBodyClassification();
    if (Objects.nonNull(publicBodyClassification)) {
      Long id = publicBodyClassification.getId();
      Optional<PublicBodyClassification> publicBodyClassificationPersisted = publicBodyClassificationRepository.findById(id);
      if (publicBodyClassificationPersisted.isPresent())
        complementaryData.setPublicBodyClassification(publicBodyClassificationPersisted.get());
    }
  }

  private void validateTypePerson(ComplementaryData complementaryData) throws ResourceNotFoundException, ComplementaryDataException {
    Contract contract = findContract(complementaryData);
    TypePerson personType = contract.getPersonType();
    if (TypePerson.INDEPENDENT_PROFESSIONAL.equals(personType)) {
      throw new ComplementaryDataException("Dados complementares são associados apenas a Pessoa Jurídica.");
    }
  }

  private Contract findContract(ComplementaryData complementaryData) throws ResourceNotFoundException {
    return contractService.find(complementaryData.getContractId());
  }

  private void copyNonNullFields(ComplementaryData origin, ComplementaryData complementaryData) {
    Long contractId = origin.getContractId();
    Boolean multiCompany = origin.getMultiCompany();
    String stateRegistration = origin.getStateRegistration();
    String cityRegistration = origin.getCityRegistration();
    CieeActivity activity = origin.getActivity();  
    PublicBodyClassification publicBodyClassification = origin.getPublicBodyClassification();
    
    if (Objects.nonNull(contractId)) {
      complementaryData.setContractId(contractId);
    }
    
    if (Objects.nonNull(multiCompany)) {
      complementaryData.setMultiCompany(multiCompany);
    }

    if (Objects.nonNull(stateRegistration)) {
      complementaryData.setStateRegistration(stateRegistration);
    }

    if (Objects.nonNull(cityRegistration)) {
      complementaryData.setCityRegistration(cityRegistration);
    }

    if (Objects.nonNull(activity)) {
      complementaryData.setActivity(activity);
    }

    if (Objects.nonNull(publicBodyClassification)) {
      complementaryData.setPublicBodyClassification(publicBodyClassification);
    }

  }

  private void validateRegistrationFields(ComplementaryData complementaryData) throws ComplementaryDataException, ResourceNotFoundException {

    if (Objects.nonNull(complementaryData) && complementaryData.getMultiCompany()) {

      if (StringUtils.isNotEmpty(complementaryData.getStateRegistration())) {
        throw new ComplementaryDataException("'Inscrição Estadual' está disponível apenas para cadastros que não sejam multi-empresa");
      }

      if (StringUtils.isNotEmpty(complementaryData.getCityRegistration())) {
        throw new ComplementaryDataException("'Inscrição Municipal' está disponível apenas para cadastros que não sejam multi-empresa");
      }
    }
  }

  private void validatePublicBodyClassification(ComplementaryData complementaryData)
      throws ComplementaryDataException, ResourceNotFoundException {
    if (isPublicCompany(complementaryData)) {
      if (!hasPublicBodyClassification(complementaryData)) {
        throw new ComplementaryDataException("'Classificação Tipo Órgão Público' obrigatório para empresas públicas.");
      }
    } else if (hasPublicBodyClassification(complementaryData)) {
      throw new ComplementaryDataException("'Classificação Tipo Órgão Público' deve ser informada apenas para empresas públicas.");
    }
  }

  private boolean hasPublicBodyClassification(ComplementaryData complementaryData) {
    PublicBodyClassification publicBodyClassification = complementaryData.getPublicBodyClassification();
    return Objects.nonNull(publicBodyClassification) && Objects.nonNull(publicBodyClassification.getId());
  }

  private boolean isPublicCompany(ComplementaryData complementaryData) throws ComplementaryDataException, ResourceNotFoundException {
    Contract contract = this.contractService.find(complementaryData.getContractId());
    CompanyContractInfo companyContractInfo = contract.getMainCompanyContractInfo();

    if(Objects.nonNull(companyContractInfo) && Objects.nonNull(companyContractInfo.getSegmentCompanyType())){
      return SegmentCompanyType.PUBLIC.equals(companyContractInfo.getSegmentCompanyType());
    }
    return false;
  }

  @Override
  public ComplementaryData updateNonNullFields(ComplementaryData model) throws BaseException {
    return super.updateNonNullFields(model);
  }
  
  @Override
  protected void postUpdate(ComplementaryData model) throws BaseException {
	  super.postUpdate(model);
	  this.contractService.verificaAcaoLegado(model.getContract());
  }

  /**
   * TODO: Atualização deve ser removida no futuro, para só contrato possuir está informação
   *
   * @param complementaryData
   * @throws BaseException
   */
  private void associateCompanyContractInfoActivity(ComplementaryData complementaryData) throws BaseException {

    if (Objects.isNull(complementaryData.getContractId()) || Objects.isNull(complementaryData.getActivity()))
      return;

    Contract contract = loadContract(complementaryData);

    if (Objects.isNull(contract))
      return;

    CompanyContractInfo contractInfo = contract.getMainCompanyContractInfo();

    if (Objects.nonNull(contractInfo)) {
      contractInfo.setActivity(complementaryData.getActivity());
      this.companyContractInfoService.save(contractInfo);
    }
  }
  
  @SneakyThrows({CarteiraException.class})
  private Long validarIdCarteira(ComplementaryData complementaryData){
  	if(Objects.isNull(complementaryData.getWalletConsultant()) || Strings.isEmpty(complementaryData.getWalletConsultant().toString())) {
  		return null;
  	}
  	return carteiraRepository.findById(complementaryData.getWalletConsultant()).map(Carteira::getId).orElseThrow(CarteiraException::new);
  }

}
