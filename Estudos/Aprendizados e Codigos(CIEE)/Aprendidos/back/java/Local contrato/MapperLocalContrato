package br.com.adtsys.ciee.company.contractplaces.service.cadastro;

import br.com.adtsys.ciee.company.address.model.Address;
import br.com.adtsys.ciee.company.address.service.AddressService;
import br.com.adtsys.ciee.company.cieeactivity.repository.CieeActivityRepository;
import br.com.adtsys.ciee.company.classcouncil.repository.ClassCouncilRepository;
import br.com.adtsys.ciee.company.contract.enumeration.CompanyTypeEnum;
import br.com.adtsys.ciee.company.contract.exception.ContractNotFoundError;
import br.com.adtsys.ciee.company.contract.model.Contract;
import br.com.adtsys.ciee.company.contract.model.cadastro.EmailDTO;
import br.com.adtsys.ciee.company.contract.model.cadastro.EnderecoDTO;
import br.com.adtsys.ciee.company.contract.model.cadastro.TelefoneDTO;
import br.com.adtsys.ciee.company.contract.repository.ContractRepository;
import br.com.adtsys.ciee.company.contractplaces.model.ContractPlaces;
import br.com.adtsys.ciee.company.contractplaces.model.cadastro.CadastroLocalContratoDTO;
import br.com.adtsys.ciee.company.contractplaces.model.cadastro.ContatoLocalContratoDTO;
import br.com.adtsys.ciee.company.contractplaces.model.cadastro.EnderecoLocalContratoDTO;
import br.com.adtsys.ciee.company.contractplaces.model.cadastro.RepresentanteLocalContratoDTO;
import br.com.adtsys.ciee.company.contractplacesaddresses.model.ContractPlacesAddress;
import br.com.adtsys.ciee.company.contractplacesrepresentative.model.ContractPlacesRepresentative;
import br.com.adtsys.ciee.company.contractrepresentative.repository.ContractRepresentativeRepository;
import br.com.adtsys.ciee.company.contribution.exception.InvalidManagementContributionException;
import br.com.adtsys.ciee.company.email.model.Email;
import br.com.adtsys.ciee.company.person.model.Person;
import br.com.adtsys.ciee.company.phone.model.Phone;
import br.com.adtsys.ciee.company.representative.model.Representative;
import br.com.adtsys.ciee.company.representative.service.ClonadorRepresentanteService;
import br.com.adtsys.ciee.company.security.CurrentUserInfo;
import br.com.adtsys.ciee.company.unit.model.PortfolioDTO;
import br.com.adtsys.ciee.company.unit.service.ManagementService;
import br.com.adtsys.ciee.company.unit.service.PortfolioMappingService;
import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.collections4.ListUtils;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Optional;
import java.util.function.Consumer;
import java.util.stream.Collectors;

import static br.com.adtsys.ciee.company.utils.FuncoesUtilitarias.load;

@Component
@RequiredArgsConstructor
public class MapperLocalContrato {

    private final CurrentUserInfo currentUserInfo;
    private final ContractRepository contractRepository;
    private final ClassCouncilRepository classCouncilRepository;
    private final CieeActivityRepository cieeActivityRepository;
    private final AddressService addressService;
    private final PortfolioMappingService mappingService;
    private final ManagementService managementService;
    private final ContractRepresentativeRepository contractRepresentativeRepository;
    private final ClonadorRepresentanteService clonadorRepresentante;

    public ContractPlaces mapearParaEntidade(CadastroLocalContratoDTO cadastroLocalContratoDTO) {
        ContractPlaces contractPlaces = ContractPlaces.builder()
            .birthDate(copiarPorTipoEmpresa(CompanyTypeEnum.INDEPENDENT_PROFESSIONAL, cadastroLocalContratoDTO.getCompanyPersonType(), cadastroLocalContratoDTO.getBirthDate()))
            .cei(cadastroLocalContratoDTO.getCei())
            .cnpj(copiarPorTipoEmpresa(CompanyTypeEnum.LEGAL_ENTITY, cadastroLocalContratoDTO.getCompanyPersonType(), cadastroLocalContratoDTO.getCnpj()))
            .companyName(cadastroLocalContratoDTO.getCompanyName())
            .companyPersonType(cadastroLocalContratoDTO.getCompanyPersonType())
            .companyType(cadastroLocalContratoDTO.getSegmentCompanyType())
            .contacts(cadastroLocalContratoDTO.getContacts().stream().map(this::converterContato).collect(Collectors.toList()))
            .councilNumber(cadastroLocalContratoDTO.getCouncilNumber())
            .cpf(copiarPorTipoEmpresa(CompanyTypeEnum.INDEPENDENT_PROFESSIONAL, cadastroLocalContratoDTO.getCompanyPersonType(), cadastroLocalContratoDTO.getCpf()))
            //.idConfiguracaoCobranca(cadastroLocalContratoDTO.getIdConfiguracaoCobranca())
            .integracaoTotvs(cadastroLocalContratoDTO.getIntegracaoTotvs())
            .isClassCouncilActive(cadastroLocalContratoDTO.getIsClassCouncilActive())
            .isContractAdmin(cadastroLocalContratoDTO.getIsContractAdmin())
            .municipalInscription(cadastroLocalContratoDTO.getMunicipalInscription())
            .name(copiarPorTipoEmpresa(CompanyTypeEnum.INDEPENDENT_PROFESSIONAL, cadastroLocalContratoDTO.getCompanyPersonType(), cadastroLocalContratoDTO.getName()))
            .registerValidity(cadastroLocalContratoDTO.getRegisterValidity())
            .state(cadastroLocalContratoDTO.getState().name())
            .stateInscription(cadastroLocalContratoDTO.getStateInscription())
            .tradingName(cadastroLocalContratoDTO.getTradingName())
            .site(cadastroLocalContratoDTO.getSite())
            .descricaoLocal(cadastroLocalContratoDTO.getDescricaoLocal())
            .carteiraConsultor(cadastroLocalContratoDTO.getCarteiraConsultor())
            .build();

        contractPlaces.setContractPlacesRepresentatives(converterRepresentantesLocal(contractPlaces, cadastroLocalContratoDTO.getReoresentatives()));
        contractPlaces.setContractPlacesAddresses(converterEnderecosLocal(contractPlaces, cadastroLocalContratoDTO.getAddresses()));
        contractPlaces.setPhones(converterTelefones(cadastroLocalContratoDTO.getPhones()));
        definirDadosContribuicao(contractPlaces, cadastroLocalContratoDTO);
        ajustarReferencias(contractPlaces, cadastroLocalContratoDTO);
        return contractPlaces;
    }

    private Person converterContato(ContatoLocalContratoDTO contato) {
        return Person.builder()
            .department(contato.getDepartment())
            .name(contato.getName())
            .email(converterEmail(contato.getEmail()))
            .role(contato.getRole())
            .phones(converterTelefones(contato.getPhones()))
            .build();
    }

    private void ajustarReferencias(ContractPlaces contractPlaces, CadastroLocalContratoDTO cadastroLocalContratoDTO) {
        Contract contract = Optional.ofNullable(load(contractRepository::findById, cadastroLocalContratoDTO.getContract())).orElseThrow(ContractNotFoundError::new);
        contractPlaces.setContract(contract);

        Optional.ofNullable(load(classCouncilRepository::findById, cadastroLocalContratoDTO.getClassCouncil())).ifPresent(contractPlaces::setClassCouncil);
        Optional.ofNullable(load(cieeActivityRepository::findById, cadastroLocalContratoDTO.getCieeActivity())).ifPresent(contractPlaces::setActivity);

        ListUtils.emptyIfNull(contractPlaces.getContractPlacesAddresses()).stream()
                .findFirst()
                .ifPresent(contractPlaces::setContractPlacesAddress);

        Optional.ofNullable(contractPlaces.getContractPlacesAddress())
            .map(ContractPlacesAddress::getAddress)
            .ifPresent(addressService::updateAddressGeocodeInfo);
        associarCarteira(contractPlaces.getContractPlacesAddress());

        if (CollectionUtils.isEmpty(contractPlaces.getContractPlacesRepresentatives())) {
            this.atribuirRepresentantesDoContrato(contractPlaces);
        }
    }

    private void associarCarteira(ContractPlacesAddress contractPlacesAddress) {
        Optional.ofNullable(contractPlacesAddress)
            .map(ContractPlacesAddress::getAddress)
            .map(Address::getZipCode)
            .map(mappingService::retrieve)
            .flatMap(list -> list.stream().findFirst())
            .ifPresent(this.carteiraEncontrada(contractPlacesAddress));
    }

    private Consumer<PortfolioDTO> carteiraEncontrada(ContractPlacesAddress contractPlacesAddress) {
        return portfolioDTO -> {
            try {
                Long walletId = portfolioDTO.getWalletId();
                Long cieeUnitId = portfolioDTO.getCieeUnitId();
                String cieeUnitDescription = portfolioDTO.getCieeUnitDescription();
                Long managementId = managementService.getManagementIdByCieeUnit(cieeUnitId);
                String managementDescription = portfolioDTO.getManagement() == null ? "" : portfolioDTO.getManagement().getDescription();

                contractPlacesAddress.setPortfolioId(walletId);
                contractPlacesAddress.setCieeUnitId(cieeUnitId);
                contractPlacesAddress.setManagementId(managementId);
                contractPlacesAddress.setCieeUnitDescription(cieeUnitDescription);
                contractPlacesAddress.setManagementDescription(managementDescription);
            } catch (InvalidManagementContributionException e) {
                e.printStackTrace();
            }
        };
    }

    private void atribuirRepresentantesDoContrato(ContractPlaces model) {
        model.setContractPlacesRepresentatives(ListUtils.emptyIfNull(model.getContractPlacesRepresentatives()));
        contractRepresentativeRepository.findAllByContractId(model.getContract().getId()).stream()
            .map(contractRepresentative -> ContractPlacesRepresentative.builder()
                .contractPlace(model)
                .representative(clonadorRepresentante.clonaRepresentante(contractRepresentative.getRepresentative(), model))
                .representativeType(contractRepresentative.getRepresentativeType())
                .build())
            .forEach(model.getContractPlacesRepresentatives()::add);
    }

    private void definirDadosContribuicao(ContractPlaces contractPlaces, CadastroLocalContratoDTO cadastroLocalContratoDTO) {
        if (!currentUserInfo.hasAuthority("aut_cidif_locco")) {
            contractPlaces.setIsDifferentiatedCi(false);
            contractPlaces.setAmountCi(null);
        } else {
            contractPlaces.setIsDifferentiatedCi(cadastroLocalContratoDTO.getIsDifferentiatedCi());
            contractPlaces.setAmountCi(cadastroLocalContratoDTO.getAmountCi());
        }
    }

    private List<ContractPlacesAddress> converterEnderecosLocal(ContractPlaces contractPlaces, List<EnderecoLocalContratoDTO> addresses) {
        return addresses.stream()
            .map(endereco -> ContractPlacesAddress.builder()
                .contractPlace(contractPlaces)
                .address(converterEndereco(endereco.getAddress()))
                .mainAddress(endereco.getMainAddress())
                .build())
            .collect(Collectors.toList());
    }

    private Address converterEndereco(EnderecoDTO endereco) {
        return Address.builder()
            .address(endereco.getAddress())
            .zipCode(endereco.getZipCode())
            .type(endereco.getType())
            .state(endereco.getState())
            .number(endereco.getNumber())
            .complement(endereco.getComplement())
            .neighborhood(endereco.getNeighborhood())
            .city(endereco.getCity())
            .build();
    }

    private List<ContractPlacesRepresentative> converterRepresentantesLocal(ContractPlaces contractPlaces, List<RepresentanteLocalContratoDTO> reoresentatives) {
        return ListUtils.emptyIfNull(reoresentatives).stream()
            .map(rep -> ContractPlacesRepresentative.builder()
                .representativeType(rep.getRepresentativeType())
                .contractPlace(contractPlaces)
                .representative(converterRepresentante(rep))
                .build())
            .collect(Collectors.toList());
    }

    private Representative converterRepresentante(RepresentanteLocalContratoDTO rep) {
        return Representative.builder()
            .phones(converterTelefones(rep.getRepresentative().getPhones()))
            .email(converterEmail(rep.getRepresentative().getEmail()))
            .segment(rep.getRepresentative().getSegment())
            .cpf(rep.getRepresentative().getCpf())
            .department(rep.getRepresentative().getDepartment())
            .name(rep.getRepresentative().getName())
            .role(rep.getRepresentative().getRole())
            .build();
    }

    private Email converterEmail(EmailDTO email) {
        return Email.builder()
            .description(email.getDescription())
            .address(email.getAddress())
            .build();
    }

    private List<Phone> converterTelefones(List<TelefoneDTO> telefones) {
        return telefones.stream()
            .map(this::converterTelefone)
            .collect(Collectors.toList());
    }

    private Phone converterTelefone(TelefoneDTO telefone) {
        return Phone.builder()
            .phoneType(telefone.getPhoneType())
            .number(telefone.getNumber())
            .extension(telefone.getExtension())
            .description(telefone.getDescription())
            .areaCode(telefone.getAreaCode())
            .build();
    }

    private <T> T copiarPorTipoEmpresa(CompanyTypeEnum expected, CompanyTypeEnum actual, T data) {
        return expected.equals(actual) ? data : null;
    }
}
