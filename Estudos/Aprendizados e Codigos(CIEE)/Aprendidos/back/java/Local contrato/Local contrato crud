package br.com.adtsys.ciee.company.contractplaces.controller;

import br.com.adtsys.ciee.company.contractplaces.dto.LocalContratoDropdownDTO;
import br.com.adtsys.ciee.company.contractplaces.mapper.LocalContratoDropdownMapper;
import br.com.adtsys.ciee.company.contractplaces.model.ContractPlaces;
import br.com.adtsys.ciee.company.contractplaces.model.ContractPlacesAddressManagerView;
import br.com.adtsys.ciee.company.contractplaces.model.ContractPlacesDTO;
import br.com.adtsys.ciee.company.contractplaces.model.DadosLocalDTO;
import br.com.adtsys.ciee.company.contractplaces.model.ParametroEmpresaCabecalhoResponse;
import br.com.adtsys.ciee.company.contractplaces.model.ResumoLocaisContratoResponse;
import br.com.adtsys.ciee.company.contractplaces.service.ContractPlacesService;
import br.com.adtsys.ciee.company.contractplacesaddresses.ContractPlaceAddressNotFoundException;
import br.com.adtsys.ciee.company.contractplacesaddresses.share.model.Endereco;
import br.com.adtsys.ciee.company.exception.DefaultException;
import br.com.adtsys.ciee.company.person.model.Person;
import br.com.adtsys.ciee.company.phone.model.Phone;
import br.org.ciee.kairos.architecture.base.controller.impl.BaseControllerImpl;
import br.org.ciee.kairos.architecture.core.exception.BaseException;
import br.org.ciee.kairos.architecture.core.exception.resource.ResourceNotFoundException;
import lombok.NonNull;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.List;

@RestController
@RequestMapping("/contract-places")
public class ContractPlacesController extends BaseControllerImpl<ContractPlaces> {

  private final LocalContratoDropdownMapper mapper;

  public ContractPlacesController(LocalContratoDropdownMapper mapper) {
    this.mapper = mapper;
  }

  @Override
  @PostMapping
  @ResponseStatus(code = HttpStatus.CREATED)
  @PreAuthorize("hasAnyAuthority('crud_localcon_c')")
  public ContractPlaces create(@RequestBody ContractPlaces contractPlace) throws BaseException {
    return ((ContractPlacesService) this.service).saveNovoLocalContrato(contractPlace);
  }

  @Override
  @GetMapping
  @ResponseStatus(code = HttpStatus.OK)
  @PreAuthorize("hasAnyAuthority('crud_localcon_r')")
  public Page<ContractPlaces> findAll(Pageable pageable) throws BaseException {
    return super.findAll(pageable);
  }

  @Override
  //@PreAuthorize("hasAnyAuthority('crud_localcon_r')")
  public ContractPlaces findOneById(@PathVariable("id") Long id) throws ResourceNotFoundException {
    return this.service.find(id);
  }

  @PreAuthorize("hasAnyAuthority('crud_localcon_r')")
  @GetMapping("search")
  @ResponseStatus(code = HttpStatus.OK)
  public Page<ContractPlacesAddressManagerView> search(Pageable pageable, ContractPlacesDTO contractPlacesDTO) {
    return ((ContractPlacesService) this.service).searchFull(pageable, contractPlacesDTO);
  }

  @Override
  @PreAuthorize("hasAnyAuthority('crud_localcon_u')")
  public ContractPlaces update(@PathVariable("id") Long id,
                                      @RequestBody ContractPlaces contractPlace) throws BaseException {
    return super.update(id, contractPlace);
  }

  @PreAuthorize("hasAnyAuthority('crud_localcon_u')")
  public ContractPlaces updateNonNullFields(@PathVariable("id") @NonNull Long id,
                                                   @RequestBody ContractPlaces contractPlace) throws BaseException {
    contractPlace.setId(id);
    return ((ContractPlacesService) this.service).patch(contractPlace);
  }
  
  @PatchMapping("/{contractPlaceId}/phones")
  @PreAuthorize("hasAnyAuthority('crud_localcon_u')")
  public List<Phone> updatePhones(@PathVariable("contractPlaceId") @NonNull Long contractPlaceId,
                                                   @RequestBody List<Phone> phones) throws BaseException {
    
    return ((ContractPlacesService) this.service).patchPhones(contractPlaceId, phones);
  }
  
  @PatchMapping("/{contractPlaceId}/contacts")
  @PreAuthorize("hasAnyAuthority('crud_localcon_u')")
  public List<Person> updateContacts(@PathVariable("contractPlaceId") @NonNull Long contractPlaceId,
                                                   @RequestBody List<Person> persons) throws BaseException {
    
    return ((ContractPlacesService) this.service).patchContacts(contractPlaceId, persons);
  }

  @Override
  @PreAuthorize("hasAnyAuthority('crud_localcon_d')")
  public void delete(@PathVariable("id") Long id) throws BaseException {
    super.delete(id);
  }

    @PreAuthorize("hasAnyAuthority('crud_localcon_r')")
  @GetMapping("count")
  @ResponseStatus(code = HttpStatus.OK)
  public Long count(@RequestParam("contractId") Long contractId) {
    return ((ContractPlacesService) this.service).count(contractId);
  }

  @PreAuthorize("hasAnyAuthority('crud_localcon_r')")
  @GetMapping("/{idContrato}/dropdown")
  @ResponseStatus(code = HttpStatus.OK)
  public List<LocalContratoDropdownDTO> buscarParaDropdown(@PathVariable("idContrato") Long idContrato,
                                                               @RequestParam(value = "filtro", required = false) String filtro,
                                                               Pageable pageable)
          throws ContractPlaceAddressNotFoundException,
          DefaultException {

    return ((ContractPlacesService) this.service).buscarParaDropdown(filtro,idContrato,pageable);

  }

  @GetMapping("/{id}/company-header")
  @ResponseStatus(code = HttpStatus.OK)
  public ParametroEmpresaCabecalhoResponse informacoesCabecalhoParametroEmpresa(@PathVariable("id") Long idLocalContrato) {
    return ((ContractPlacesService) this.service).informacoesCabecalhoParametroEmpresa(idLocalContrato);
  }

  @GetMapping("/dropdown-por-empresas")
  @PreAuthorize("hasAnyAuthority('crud_localcon_r')")
  public ResponseEntity<Page<LocalContratoDropdownDTO>> buscarParaDropdownPorEmpresas(@RequestParam List<Long> idsEmpresa,
                                                                                      @RequestParam(value = "endereco", required = false) String endereco, Pageable pageable) {
    return ResponseEntity.ok(((ContractPlacesService) this.service).buscarLocaisContratoPorIdsEmpresa(idsEmpresa, endereco, pageable)
            .map(mapper::mapResponse));
  }
  
  @GetMapping("/{id}/endereco")
  @ResponseStatus(code = HttpStatus.OK)
  public Endereco buscarInformacaoEnderecoLocal(@PathVariable("id") Long idLocalContrato) {
    return ((ContractPlacesService) this.service).buscarInformacaoEnderecoLocal(idLocalContrato);
  }
  
  @PostMapping("/valida-cnpj-local")
  @ResponseStatus(code = HttpStatus.OK)
  @PreAuthorize("hasAnyAuthority('crud_localcon_r')")
  public Boolean validaCnpjLocal(@RequestBody DadosLocalDTO dadosLocalDTO) throws BaseException {
    return ((ContractPlacesService) this.service).validaCnpjLocal(dadosLocalDTO);
  }

}
