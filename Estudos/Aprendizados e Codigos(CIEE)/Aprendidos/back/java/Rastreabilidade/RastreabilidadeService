package br.org.ciee.kairos.vagas.api.client.rastreabilidade;

import java.text.ParseException;
import java.util.List;
import java.util.Map;

import br.org.ciee.kairos.vagas.api.client.rastreabilidade.model.ValidacaoCursoRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;

import br.org.ciee.kairos.vagas.api.client.rastreabilidade.model.FiltroPesquisaDTO;
import br.org.ciee.kairos.vagas.api.client.rastreabilidade.model.RastreabilidadeDTO;
import br.org.ciee.kairos.vagas.api.client.rastreabilidade.model.RastreabilidadeCompletaProjection;
import br.org.ciee.kairos.vagas.api.client.rastreabilidade.model.RastreabilidadeSimplesProjection;

import javax.validation.Valid;

public interface RastreabilidadeContractService {

	@PostMapping("/rastrear/buscar-candidato/filtro-simples")
	ResponseEntity<RastreabilidadeSimplesProjection> salvarRastreabilidade(
			@RequestHeader(value = "Authorization", required = false) String authToken,
			@RequestBody FiltroPesquisaDTO filtroPesquisaDTO) throws ParseException;

	@PutMapping("/rastrear/buscar-candidato/filtro-avancado")
	ResponseEntity<RastreabilidadeSimplesProjection> atualizarRastreabilidadeFiltro(
			@RequestHeader(value = "Authorization", required = false) String authToken,
			@RequestBody RastreabilidadeDTO rastreabilidadeDTO) throws ParseException;

	@PutMapping("/rastrear/buscar-candidato-cv")
	ResponseEntity<RastreabilidadeSimplesProjection> atualizarRastreabilidadeCandidato(
			@RequestHeader(value = "Authorization", required = true) String authToken,
			@RequestBody RastreabilidadeDTO rastreabilidadeDTO) throws ParseException;

	@PutMapping("/rastrear/comparar-candidatos-cv")
	ResponseEntity<RastreabilidadeSimplesProjection> atualizarRastreabilidadeComparaCandidato(
			@RequestHeader(value = "Authorization") String authToken,
			@RequestBody RastreabilidadeDTO rastreabilidadeDTO) throws ParseException;

	@PutMapping("/rastrear/selecionar-candidato")
	ResponseEntity<RastreabilidadeSimplesProjection> atualizarRastreabilidadeSelecionarCandidato(
			@RequestHeader(value = "Authorization", required = true) String authToken,
			@RequestBody RastreabilidadeDTO rastreabilidadeDTO) throws ParseException;

	@PutMapping("/rastrear/pre-cadastro-empresa")
	ResponseEntity<RastreabilidadeSimplesProjection> atualizarRastreabilidadePreCadastroEmpresa(
			@RequestBody RastreabilidadeDTO rastreabilidadeDTO);

	@PutMapping("/rastrear/candidato-vaga")
	ResponseEntity<RastreabilidadeSimplesProjection> candidatoVaga(@RequestHeader(value = "Authorization", required = true) String authToken, @RequestBody RastreabilidadeDTO rastreabilidadeDTO) throws ParseException;

	@GetMapping("/rastrear/id/{id}")
	ResponseEntity<RastreabilidadeCompletaProjection> buscarPorId(@PathVariable(value = "id") String id);

	@PutMapping("/rastrear/{id}/validacao-curso-candidatos")
	ResponseEntity<Map<String, Boolean>> validarCursoCandidatoNaoAderenteComCursoVaga(@PathVariable("id") String id,
																		   @Valid @RequestBody ValidacaoCursoRequest request);

	@GetMapping("/rastrear/{id}/candidatos-nao-aderentes")
	ResponseEntity<Map<String, List<Long>>> buscarCandidatosNaoAderentesVaga(@PathVariable("id") String id);

}
