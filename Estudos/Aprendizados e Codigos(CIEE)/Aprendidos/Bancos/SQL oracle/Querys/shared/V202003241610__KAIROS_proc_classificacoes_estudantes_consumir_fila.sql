create or replace PROCEDURE PROC_CLASSIFICACOES_ESTUDANTES_CONSUMIR_FILA 
AS
    VAR_TEMP_EST IDS_TYP := IDS_TYP();
    VAR_TEMP_FILA IDS_TYP := IDS_TYP();
    VAR_ERRO NUMBER;
    VAR_INICIO_PROCESSO TIMESTAMP;
    VAR_MENSAGEM VARCHAR2(4000 CHAR);
    VAR_PROCEDURE VARCHAR2(255 CHAR) := $$plsql_unit;
BEGIN
    VAR_INICIO_PROCESSO := current_timestamp;
    
    FOR ITEM_FILA IN (
        SELECT
            REGRA.ID AS ID_REGRA,
            REGRA.PONTO AS PONTO,
            REGRA.FAIXA AS FAIXA,
            REGRA.PERIODO AS PERIODO,
            REGRA.INDICADOR AS INDICADOR,
            CAST(COLLECT(FILA.ID_ESTUDANTE) AS IDS_TYP) AS ID_ESTUDANTES,
            CAST(COLLECT(FILA.ID) AS IDS_TYP) AS ID_ITENS_FILA

        FROM ESTUDANTES_PASSIVEIS_CLASSIFICACOES FILA 
        INNER JOIN CLASSIFICACOES_PARAMETROS_ITENS REGRA ON REGRA.ID = FILA.ID_CLASSIFICACOES_PARAMETROS_ITENS

        WHERE (FILA.DELETADO IS NULL OR FILA.DELETADO = 0)
        AND (REGRA.DELETADO IS NULL OR REGRA.DELETADO = 0)

        GROUP BY REGRA.ID, REGRA.INDICADOR, REGRA.PONTO, REGRA.FAIXA, REGRA.PERIODO
    ) LOOP

        VAR_TEMP_EST := VAR_TEMP_EST MULTISET UNION DISTINCT ITEM_FILA.ID_ESTUDANTES;
        VAR_TEMP_FILA := VAR_TEMP_FILA MULTISET UNION DISTINCT ITEM_FILA.ID_ITENS_FILA;
        
        DELETE 
            FROM CLASSIFICACOES_ESTUDANTES_ANALITICO
            WHERE ID IN(SELECT ANALITICO.ID
                            FROM CLASSIFICACOES_ESTUDANTES_ANALITICO ANALITICO
                            INNER JOIN CLASSIFICACOES_PARAMETROS_ITENS ITENS  
                            ON ITENS.ID = ANALITICO.ID_CLASSIFICACAO_PARAMETROS_ITEN
                            WHERE ID_ESTUDANTE IN((SELECT COLUMN_VALUE ID_ESTUDANTE 
                                                        FROM TABLE(ITEM_FILA.ID_ESTUDANTES)))
                                                        AND ITENS.ID = ITEM_FILA.ID_REGRA);
        
        DELETE 
            FROM CLASSIFICACOES_ESTUDANTES_CONSOLIDADO CONSOLIDADO
            WHERE CONSOLIDADO.ID_ESTUDANTE IN((SELECT COLUMN_VALUE ID_ESTUDANTE FROM TABLE(ITEM_FILA.ID_ESTUDANTES)) );
            
        IF (ITEM_FILA.INDICADOR = 'ANALISE_COMPORTAMENTAL') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_ANALISE_COMPORTAMENTAL(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF (ITEM_FILA.INDICADOR = 'REDACAO') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_REDACAO(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF (ITEM_FILA.INDICADOR = 'VIDEO_APRESENTACAO') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_VIDEO_APRESENTACAO(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF (ITEM_FILA.INDICADOR = 'CURSOS_CERTIFICACAO') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_CURSOS_CERTIFICACAO(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF (ITEM_FILA.INDICADOR = 'FAVORITO') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_FAVORITO(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF (ITEM_FILA.INDICADOR = 'TESTES_CIEE') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_TESTES_CIEE(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF (ITEM_FILA.INDICADOR = 'VIDEO_CURRICULO') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_VIDEO_CURRICULO(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);        
        ELSIF(ITEM_FILA.INDICADOR = 'ESCOLA_CLASSIFICACAO') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_CLAS_ESCO(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF(ITEM_FILA.INDICADOR = 'FALTA_INJUSTIFICADA_ETAPA') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_FALTA_INJUST_EM_ETAPA(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF(ITEM_FILA.INDICADOR = 'SEM_RETORNO_PENDENTE') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_SEM_RET_CONVOC(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF (ITEM_FILA.INDICADOR = 'MODULO_ESCOLA_NAO_IDENTIFICADA') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_MODULO_ESCOLA_NAO_IDENTIFICADA(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF (ITEM_FILA.INDICADOR = 'MODULO_CAMPUS_INATIVO') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_MODULO_CAMPUS_INATIVO(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF (ITEM_FILA.INDICADOR = 'MODULO_CONTATO_SEM_EMAIL') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_MODULO_CONTATO_SEM_EMAIL(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        ELSIF (ITEM_FILA.INDICADOR = 'MODULO_PCD_PENDENTE') THEN
            PROC_CLASSIFICACOES_ESTUDANTES_MODULO_PCD_PENDENTE(
                ITEM_FILA.ID_ESTUDANTES, ITEM_FILA.ID_REGRA, ITEM_FILA.FAIXA, ITEM_FILA.PERIODO, ITEM_FILA.PONTO, VAR_ERRO);
        END IF;

    END LOOP;

    --DELETE FROM ESTUDANTES_PASSIVEIS_CLASSIFICACOES WHERE ID IN( (SELECT COLUMN_VALUE ID_ESTUDANTE FROM TABLE(VAR_TEMP_FILA)) );

    -- EXECUTA CALCULO CONSOLIDADO
    MERGE INTO CLASSIFICACOES_ESTUDANTES_CONSOLIDADO CONSOLIDADO
    USING (
        SELECT 
            T.ID_ESTUDANTE,
            T.TOTAL,
            P.DESCRICAO AS CLASSIFICACAO  
        FROM (
            SELECT ANALITICO.ID_ESTUDANTE, SUM(ANALITICO.PONTUACAO_ATUAL) AS TOTAL
            FROM CLASSIFICACOES_ESTUDANTES_ANALITICO ANALITICO
            WHERE
            (ANALITICO.DELETADO IS NOT NULL OR ANALITICO.DELETADO = 0) 
            AND ANALITICO.ID_ESTUDANTE IN( (SELECT COLUMN_VALUE ID_ESTUDANTE FROM TABLE(VAR_TEMP_EST)) )
            GROUP BY ANALITICO.ID_ESTUDANTE
        ) T
        LEFT JOIN CLASSIFICACOES_PARAMETROS_PONTOS P ON P.PONTO_DE <= T.TOTAL AND P.PONTO_ATE >= T.TOTAL    
    ) ANALITICO
    ON(CONSOLIDADO.ID_ESTUDANTE = ANALITICO.ID_ESTUDANTE)
    WHEN MATCHED THEN
        UPDATE SET CONSOLIDADO.PONTUACAO_OBTIDA = ANALITICO.TOTAL, CONSOLIDADO.CLASSIFICACAO_OBTIDA = ANALITICO.CLASSIFICACAO
    WHEN NOT MATCHED THEN
        INSERT(
        ID, DATA_CRIACAO, DATA_ALTERACAO, CRIADO_POR, MODIFICADO_POR, DELETADO,
        ID_ESTUDANTE, PONTUACAO_OBTIDA, CLASSIFICACAO_OBTIDA, DATA_CALCULO_PONTUACAO)
        VALUES(
            SEQ_CLASSIFICACOES_ESTUDANTES_CONSOLIDADO.NEXTVAL,
            CURRENT_TIMESTAMP,
            CURRENT_TIMESTAMP,
            'PROC_CLASSIFICACOES_ESTUDANTES_CONSUMIR_FILA',
            'PROC_CLASSIFICACOES_ESTUDANTES_CONSUMIR_FILA',
            0,
            ANALITICO.ID_ESTUDANTE,
            ANALITICO.TOTAL,
            ANALITICO.CLASSIFICACAO,
            CURRENT_TIMESTAMP
        );

    INSERT INTO classificacoes_estudantes_log (ID, data_criacao, data_alteracao, criado_por, modificado_por, deletado,
        ids_estudantes, id_classificacoes_parametros_itens, inicio_processo, fim_processo)
    VALUES (seq_classificacoes_estudantes_log.NEXTVAL, current_timestamp, current_timestamp, 
        VAR_PROCEDURE, VAR_PROCEDURE, 0, var_temp_est, null, var_inicio_processo, current_timestamp);

EXCEPTION
    WHEN OTHERS THEN
        var_mensagem := sqlerrm;

        INSERT INTO classificacoes_estudantes_log (ID, data_criacao, data_alteracao, criado_por, modificado_por, deletado,
            ids_estudantes, id_classificacoes_parametros_itens, inicio_processo, fim_processo, mensagem)
        VALUES (seq_classificacoes_estudantes_log.NEXTVAL, current_timestamp, current_timestamp, 
            VAR_PROCEDURE, VAR_PROCEDURE, 0, var_temp_est, null, var_inicio_processo, current_timestamp, var_mensagem);

END PROC_CLASSIFICACOES_ESTUDANTES_CONSUMIR_FILA;