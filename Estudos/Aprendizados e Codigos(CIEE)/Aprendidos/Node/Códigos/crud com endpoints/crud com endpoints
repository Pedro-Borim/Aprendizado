const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid'); // Importe a função de geração de UUID
const app = express();

app.use(bodyParser.json());

const PORT = process.env.PORT || 3000;
const DB_PATH = './db.json';

const readDb = () => {
  const data = fs.readFileSync(DB_PATH, 'utf8');
  return JSON.parse(data);
};

const writeDb = (data) => {
  fs.writeFileSync(DB_PATH, JSON.stringify(data, null, 2));
};

app.get('/posts', (req, res) => {
  const db = readDb();
  res.json(db.posts);
});

app.get('/posts/:id', (req, res) => {
  const db = readDb();
  const post = db.posts.find((post) => post.id === req.params.id);
  res.json(post);
});

app.post('/posts', (req, res) => {
  const db = readDb();
  const newPost = {
    id: uuidv4(), // Gera um ID único usando UUID
    title: req.body.title,
    content: req.body.content,
  };
  db.posts.push(newPost);
  writeDb(db);
  res.json(newPost);
});

app.put('/posts/:id', (req, res) => {
  const db = readDb();
  const updatedPost = req.body;
  const postIndex = db.posts.findIndex((post) => post.id === req.params.id);
  if (postIndex !== -1) {
    db.posts[postIndex] = { ...db.posts[postIndex], ...updatedPost };
    writeDb(db);
    res.json(db.posts[postIndex]);
  } else {
    res.status(404).send('Post not found');
  }
});

app.delete('/posts/:id', (req, res) => {
  const db = readDb();
  const postIndex = db.posts.findIndex((post) => post.id === req.params.id);
  if (postIndex !== -1) {
    db.posts.splice(postIndex, 1);
    writeDb(db);
    res.sendStatus(204);
  } else {
    res.status(404).send('Post not found');
  }
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});